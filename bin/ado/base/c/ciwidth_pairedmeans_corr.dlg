/*
	ciwidth pairedmeans, corr()

*!  VERSION 1.0.10  30jul2019

*/

VERSION 16.0

INCLUDE _std_xwide
DEFINE _dlght 580
INCLUDE header

HELP hlp1, view("help ciwidth pairedmeans")
RESET res1

SCRIPT PREINIT
BEGIN
	create STRING graph_res
	setscale_hadj resource CIWIDTH_TWOPAIREDMEANS_CORR_DLG_HSCALE
END

SCRIPT POSTINIT
BEGIN
	main.cb_compute.setcontentslist main_compute_onemean_list
	main.cb_compute.setvalueslist main_compute_onemean_values
	main.cb_compute.repopulate
	main.cb_compute.setvalue sampsi
	program main_probwidth_show
END

DIALOG main, tabtitle(resource LBL_TAB_MAIN)				///
	label(resource CIWIDTH_PAIREDMEANS_CORR_DLG_TITLE)
BEGIN
  
  INCLUDE ciwidth_compute

  DEFINE con_y _ls
  INCLUDE ciwidth_confidence

  DEFINE samp_y +45
  INCLUDE ciwidth_sampsi

  GROUPBOX gb_precision		_lft	+45	_iwd	_ht20,		///
	label(resource LBL_PRECISION)
/*
  GROUPBOX gb_means		_ilft	_ss	_cwd1	_ht5,		///
	label("Means (optional)")
//      label(resource LBL_MEANS_OPTIONAL)

  DEFINE holdy2 @y
  EDIT ed_control		_indent	_ss	_en14wd	.,		///
	onchange(program check_for_numlist)				///
	tooltip(resource POWER_TWOMEANS_MAIN_ED_CONTROL)		///
	label("")
  TEXT tx_control		_en14sep @	100	.,		///
	label(resource LBL_STAR_CONTROL)
  EDIT ed_exp_diff		_iilft	_ls	_en14wd	.,		///
	onchange(program check_for_numlist)				///
	option(diff)							///
	label("")
  TEXT tx_exp_diff		_en14sep @	8	.,		///
	label("*")
  COMBOBOX cb_exp_diff		+10	 @	100	.,		///
	dropdownlist							///
	contents("main_effect_list")					///
	values("main_effect_values")					///
	onselchange("program check_for_numlist")			///
	label("")
*/
  EDIT ed_width			_ilft	_ss	_en14wd	.,		///
	option(width)							///
	onchange("program check_for_numlist")				///
	error(resource LBL_STAR_CI_WIDTH)
  DEFINE holdy2 @y
  TEXT tx_width			_en14sep @	120	.,		///
	label(resource LBL_STAR_CI_WIDTH)

  GROUPBOX gb_sd		_lft2	holdy2	_cwd2	_ht17,		///
	label(resource LBL_CORRELATION_AND_STANDARD_DEVIATIONS)
  EDIT ed_corr			_ilft2	_ss	_en14wd	.,		///
	option(corr)							///
	onchange("program check_for_numlist")				///
	error(resource LBL_CORRELATION)					///
	label(resource LBL_CORRELATION)
  TEXT tx_corr			_en14sep @	120	.,		///
	label(resource LBL_STAR_CORRELATION)
  RADIO rb_std_common		_ilft2	_ls	200	., first	///
	onclickon("program main_std_check")				///
	label(resource LBL_COMMON_STANDARD_DEVIATION)
  RADIO rb_std_group		@	+50	@	., last		///
	onclickon("program main_std_check")				///
	label(resource LBL_GROUP_STANDARD_DEVIATIONS)
  EDIT ed_sd			_iilft2	-25	_en14wd	.,		///
	option(sd)							///
	default(1)							///
	onchange(program check_for_numlist)				///
	label(resource LBL_COMMON_VALUE)
  TEXT tx_sd			_en14sep @	95	.,		///
	label(resource LBL_STAR_COMMON_VALUE)
  EDIT ed_sd1			_iilft2	+50	_en14wd	.,		///
	onchange(program check_for_numlist)				///
	option(sd1)							///
	label(resource LBL_CONTROL)
  TEXT tx_sd1			_en14sep @	95	.,		///
	label(resource LBL_STAR_CONTROL)
  EDIT ed_sd2			_iilft2	_ms	_en14wd	.,		///
	onchange(program check_for_numlist)				///
	option(sd2)							///
	label(resource LBL_EXPERIMENTAL)
  TEXT tx_sd2			_en14sep @	95	.,		///
	label(resource LBL_STAR_EXPERIMENTAL)
  CHECKBOX ck_knownsd		_ilft2	_ls	270	.,		///
	option(knownsd)							///
	onclickon("program main_knownsd_changed")			///
	onclickoff("program main_knownsd_changed")			///
	label(resource LBL_ASSUME_A_KNOWN_STANDARD_DEVIATION)

  TEXT tx_fpc			_lft	+45	_cwd1	.,		///
	label(resource LBL_STAR_FINITE_POPULATION_CORRECTION)
  COMBOBOX cb_fpc		@	_ss	160	.,		///
	dropdownlist							///
	contents("main_fpc_list")					///
	values("main_fpc_values")					///
	onselchange("program main_fpc_changed")				///
	label(resource LBL_FINITE_POPULATION_CORRECTION)
  EDIT ed_fpc			+170	@	_en14wd	.,		///
	option(fpc)							///
	onchange(program check_for_numlist)				///
	label(resource LBL_FINITE_POPULATION_CORRECTION)

  DEFINE ypos _ls 
  INCLUDE ciwidth_test_maincommon
END

PROGRAM main_compute_changed
BEGIN
	if main.cb_compute.iseq("sampsi") {
		call program main_sampsi_on
	}
	if main.cb_compute.iseq("ciwidth") {
		call program main_ciwidth_on
	}
	if main.cb_compute.iseq("probci") {
		call program main_probci_on
	}

	call program main_std_check
	call program main_check_table_tab
END

PROGRAM main_check_table_tab
BEGIN
	call program table_create4Pairedmeans_corr
END

PROGRAM main_sampsi_on
BEGIN
	call program main_probwidth_show

	call script ciwidth_sampsi_sampsi_on

	call script ciwidth_show_width_move_sd
END

PROGRAM main_ciwidth_on
BEGIN
	call program main_probwidth_show

	call script ciwidth_sampsi_ciwidth_on

	call script ciwidth_hide_width_move_sd
END

PROGRAM main_probci_on
BEGIN
	call script main_probwidth_hide	

	call script ciwidth_sampsi_ciwidth_on

	call script ciwidth_show_width_move_sd
END

PROGRAM main_std_check
BEGIN
	if main.rb_std_common {
		call main.ed_sd.enable
		call main.tx_sd.enable

		call main.ed_sd1.disable
		call main.tx_sd1.disable
		call main.ed_sd2.disable
		call main.tx_sd2.disable
	}
	if main.rb_std_group {
		call main.ed_sd.disable
		call main.tx_sd.disable
	
		call main.ed_sd1.enable
		call main.tx_sd1.enable
		call main.ed_sd2.enable
		call main.tx_sd2.enable
	}

	call program main_knownsd_changed
END

PROGRAM main_knownsd_changed
BEGIN
	call main.ed_probwidth.enable
	call main.ck_knownsd.enable

	if main.cb_compute.iseq("probci") {
		call main.ck_knownsd.disable
		call main.ck_knownsd.setoff
	}
	if main.ck_knownsd {
		call main.ed_probwidth.disable
	}
	else {
		if main.ed_probwidth {
			call main.ck_knownsd.disable
		}
	}

	call program ciwidth_iteration_tab_check
	call program main_check_table_tab
END

SCRIPT ciwidth_hide_width_move_sd
BEGIN
	main.ed_width.hide
	main.tx_width.hide
END

SCRIPT ciwidth_show_width_move_sd
BEGIN
	main.ed_width.show
	main.tx_width.show
END

PROGRAM main_fpc_changed
BEGIN
	if main.cb_fpc.iseq("none") {
		call main.ed_fpc.hide
	}
	else {
		call main.ed_fpc.show
	}
	call program check_for_numlist
	call program ciwidth_iteration_tab_check
END


PROGRAM ciwidth_precision_output
BEGIN
	require main.ed_corr
	if !main.ed_corr.isNumlistInRange(-1,1) {
		call create STRING _MSG_TMP
		call _MSG_TMP.format					///
			"resource LBL_MSGBOX_ON_TAB_INVALID_NUMLIST_FOR_FMT" ///
			"resource LBL_TAB_MAIN" 			///
			"resource LBL_STAR_CORRELATION" 
		stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "fpc" correlation.
	}


	if main.cb_compute.isneq("ciwidth") {
		if !main.ed_width.isnumlist() | main.ed_width.isNumlistLT(0) {
		call create STRING _MSG_TMP
		call _MSG_TMP.format					///
			"resource LBL_MSGBOX_ON_TAB_INVALID_NUMLIST_FOR_FMT" ///
			"resource LBL_TAB_MAIN" 			///
			"resource LBL_CI_WIDTH" 
			stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for CI width

		}
		optionarg main.ed_width
	}

	optionarg main.ed_corr

	if main.rb_std_common {
		if !main.ed_sd.isNumlistGE(0) & main.ed_sd.isvisible() {
			call create STRING _MSG_TMP
			call _MSG_TMP.format				///
			"resource LBL_MSGBOX_ON_TAB_INVALID_NUMLIST_FOR_FMT" ///
			"resource LBL_TAB_MAIN" 			///
			"resource LBL_STANDARD_DEVIATION" 
			stopbox stop "class _MSG_TMP.value"
		}

		optionarg /hidedefault main.ed_sd
	}
	if main.rb_std_group {
		require main.ed_sd1
		require main.ed_sd2

		optionarg main.ed_sd1
		optionarg main.ed_sd2
	}
	option main.ck_knownsd
END


PROGRAM check_for_numlist
BEGIN
	call create STRING numContents
	call create STRING stok
	call create ARRAY tmp
	call create BOOLEAN containsNumlist

	call containsNumlist.setfalse

	if main.ed_level & main.ed_level.isvisible() {
		call numContents.setvalue class main.ed_level.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_alpha & main.ed_alpha.isvisible() {
		call numContents.setvalue class main.ed_alpha.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_probwidth & main.ed_probwidth.isvisible() &		///
		main.ed_probwidth.isenabled() {
		call numContents.setvalue class main.ed_probwidth.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
		call program main_knownsd_changed
	}
	else {
		call program main_knownsd_changed
	}

	if main.ed_n.isvisible() & main.ed_n {
		call numContents.setvalue class main.ed_n.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}
/*
	if main.ed_control {
		call numContents.setvalue class main.ed_control.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_exp_diff {
		call numContents.setvalue class main.ed_exp_diff.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}
*/
	if main.ed_width & main.ed_width.isvisible() {
		call numContents.setvalue class main.ed_width.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_sd & main.ed_sd.isenabled() {
		call numContents.setvalue class main.ed_sd.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_sd1.isenabled() {
		call numContents.setvalue class main.ed_sd1.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_sd2.isenabled() {
		call numContents.setvalue class main.ed_sd2.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}
	if main.ed_corr {
		call numContents.setvalue class main.ed_corr.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_fpc & main.ed_fpc.isvisible() {
		call numContents.setvalue class main.ed_fpc.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if containsNumlist {
		call main.ck_parallel.enable
	}
	else {
		call main.ck_parallel.disable
	}
	call program main_check_table_tab
END

PROGRAM ciwidth_iteration_tab_check
BEGIN
	call script ciwidth_iteration_enable
	if main.cb_compute.iseq("ciwidth") {
		call script ciwidth_iteration_disable
	}
	if main.cb_compute.iseq("sampsi") {
		call script ciwidth_iteration_is_sampsi
		if main.cb_sided.iseq("onesided") & main.ck_knownsd {
			call script ciwidth_iteration_disable
		}
	}
	if main.cb_compute.iseq("probci") {
		call script ciwidth_iteration_disable
	}
END

INCLUDE ciwidth_list
INCLUDE ciwidth_confidence_pr
INCLUDE ciwidth_sampsi_pr
INCLUDE ciwidth_test_maincommon_pr
INCLUDE ciwidth_table_opts
INCLUDE ciwidth_graph
INCLUDE ciwidth_iteration

PROGRAM command
BEGIN
	if main.cb_compute.iseq("sampsi") {
		require main.ed_width
		require main.ed_probwidth
	}
	if main.cb_compute.iseq("ciwidth") {
		require main.ed_probwidth
	}
	if main.cb_compute.iseq("probci") {
		require main.ed_width
	}

	if main.cb_fpc.iseq("sample_rate") & !main.ed_fpc.isNumlistInRange(0,1) & main.ed_fpc.isvisible() {
		call create STRING _MSG_TMP
		call _MSG_TMP.format					///
			"resource LBL_MSGBOX_ON_TAB_INVALID_NUMLIST_FOR_FMT" ///
			"resource LBL_TAB_MAIN" 			///
			"resource LBL_FINITE_POPULATION_CORRECTION" 
		stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "fpc" correlation.
	}
	if main.cb_fpc.iseq("pop_size") & !main.ed_fpc.isNumlistGT(1) & main.ed_fpc.isvisible() {
		call create STRING _MSG_TMP
		call _MSG_TMP.format					///
			"resource LBL_MSGBOX_ON_TAB_INVALID_NUMLIST_FOR_FMT" ///
			"resource LBL_TAB_MAIN" 			///
			"resource LBL_FINITE_POPULATION_CORRECTION" 
		stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "fpc" correlation.
	}

	put "ciwidth pairedmeans "
/*
	if main.ed_control {
		put " (" main.ed_control ")"
		require main.ed_exp_diff
	}
	if main.cb_exp_diff.iseq("exp") & main.ed_exp_diff {
		put " (" main.ed_exp_diff ")"
	}
*/

	beginoptions
/*
		if main.cb_exp_diff.iseq("diff") & main.ed_exp_diff {
			put " diff(" main.ed_exp_diff ")"
		}
*/
		put " " /program ciwidth_confidence_output
		put " " /program ciwidth_sampsi_output
		put " " /program ciwidth_precision_output
		optionarg main.ed_fpc
		put " " /program ciwidth_test_maincommon_output
		put " " /program ciwidth_table_opts_output
		put " " /program ciwidth_graph_output
		put " " /program ciwidth_iteration_output
	endoptions
END
