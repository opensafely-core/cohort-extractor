/*                                 rectangle_g

	a view of a rectangle

        This is a subview.  When drawn, assumes that the appropriate x and y
        scales have already been set.

*/
*! version 1.1.0  12jan2007

version 8

class {
	double x0
	double y0
	double x1
	double y1

	draw_view       = .yesno.new, style(yes)

	dragable	= 1
	drag_point	= (.)			// 1, 2, 3, 4, missing
	drag_side	= (.)			// 1, 2, 3, 4, missing

	class areastyle style

	dialog		= "rectangle"
} , inherit(subview)


/*--------------------------------------------------------------------------*/
/*
	Usage:  .rectangle_g.new y0 x0 y1 x1 [ , style(stylename)
						 styleref(name|key) ]

	if reference is specified the style is assigned by reference rather
	than by copying (by value)
*/

program new

	syntax anything(name=poslist id="4 position numbers") [ , 	///
			Style(passthru) STYLEREF(passthru) * ]

	.grid_dragable	= 0
	.deleted	= 0

	numlist "`poslist'" , min(4) max(4) missingok
	local poslist `r(numlist)'
	foreach d in x0 y0 x1 y1 {
		gettoken `d' poslist : poslist , parse(" ,")
		.`d' = (``d'')
	}

	if "`style'" == "" & "`styleref'" == "" {
		local style style(scheme)
	}

	.setstyle , `style' `styleref' `options'
end


// --------------------------------------------------------------------------

program draw
	args style

	if (! `.draw_view.istrue')  exit				// Exit

	if ("`style'" == "")  local style style

	_fr_draw_rect `style' `.x0' `.y0' `.x1' `.y1'

	.set_gdi_posn `.y0' `.x0' `.y1' `.x1'
end


// ---------------------------------------------------------------------------
// Returns true if the rectangle is at the clicked position

program AtClickedPos

	class exit = `.at_pos `.`._Gr_Global.Container'.LocalClicked' 1 1 `.`._Gr_Global.Container'.drawn_gmult''
end


// ----------------------------------------------------------------------------
// Determine if a position is in/on the view

program at_pos
	args y x 	// ...

	local found = min(`.y0',`.y1') <= `y' & `y' <= max(`.y0',`.y1') &  ///
		      min(`.x0',`.x1') <= `x' & `x' <= max(`.x0',`.x1')

							// Look for corners
	if (`found')  ._at_corner_side `0'

	if `found' {
		.found_y = `y'
		.found_x = `x'
	}

	class exit = `found'
end

program _at_corner_side
	args y x ymult xmult gmult

	local yhalo = 3 * `ymult' / 2
	local xhalo = 3 * `xmult' / 2

	if `y' - `yhalo' < `.y0' & `y' + `yhalo' > `.y0' {
		if `x' - `xhalo' < `.x0' & `x' + `xhalo' > `.x0' {
			.drag_point = 1
			exit
		}
		if `x' - `xhalo' < `.x1' & `x' + `xhalo' > `.x1' {
			.drag_point = 4
			exit
		}
		if `.x0' < `x' & `x' < `.x1' {
			.drag_side = 4
			exit
		}
	}

	if `y' - `yhalo' < `.y1' & `y' + `yhalo' > `.y1' {
		if `x' - `xhalo' < `.x0' & `x' + `xhalo' > `.x0' {
			.drag_point = 2
			exit
		}
		if `x' - `xhalo' < `.x0' & `x' + `xhalo' > `.x0' {
			.drag_point = 3
			exit
		}
		if `.x0' < `x' & `x' < `.x1' {
			.drag_side = 2
			exit
		}
	}

	if `x' - `xhalo' < `.x0' & `x' + `xhalo' > `.x0' {
		if `.y0' < `y' & `y' < `.y1' {
			.drag_side = 1
			exit
		}
	}

	if `x' - `xhalo' < `.x1' & `x' + `xhalo' > `.x1' {
		if `.y0' < `y' & `y' < `.y1' {
			.drag_side = 3
			exit
		}
	}

	.drag_side  = (.)
	.drag_point = (.)
end


// ----------------------------------------------------------------------------
// Return the currently selected end point

program DragPoint
	if      (`.drag_point' == 1)  class exit "`.gdi_x0' `.gdi_y0'"
	else if (`.drag_point' == 2)  class exit "`.gdi_x0' `.gdi_y1'"
	else if (`.drag_point' == 3)  class exit "`.gdi_x1' `.gdi_y1'"
	else if (`.drag_point' == 4)  class exit "`.gdi_x1' `.gdi_y0'"
	
	class exit ". ."
end


// ----------------------------------------------------------------------------
// Return the currently selected end line

program DragLine
	if      (`.drag_side' == 1)					///
		class exit "`.gdi_x0' `.gdi_y0' `.gdi_x0' `.gdi_y1'"
	else if (`.drag_side' == 2)					///
		class exit "`.gdi_x0' `.gdi_y1' `.gdi_x1' `.gdi_y1'"
	else if (`.drag_side' == 3)					///
		class exit "`.gdi_x1' `.gdi_y1' `.gdi_x1' `.gdi_y0'"
	else if (`.drag_side' == 4)					///
		class exit "`.gdi_x1' `.gdi_y0' `.gdi_x0' `.gdi_y0'"

	class exit ". . . ."
end

// ----------------------------------------------------------------------------
// Respond to a .DragTo by moving the position

program DragTo
	args y x

	if (`.drag_point' != 3 & `.drag_side' != 2 & `.drag_side' != 3) {
		if (`.drag_point' != 2)  .y0 = `.y0' + `y' - `.found_y'
		if (`.drag_point' != 4)  .x0 = `.x0' + `x' - `.found_x'
	}

	if (`.drag_point' != 1 & `.drag_side' != 1 & `.drag_side' != 4) {
		if (`.drag_point' != 4)  .y1 = `.y1' + `y' - `.found_y'
		if (`.drag_point' != 2)	 .x1 = `.x1' + `x' - `.found_x'
	}
end


// ----------------------------------------------------------------------------
// Respond to a .DragBy by moving the position

program DragBy
	args y_shift x_shift

	if (`.drag_point' != 3 & `.drag_side' != 2 & `.drag_side' != 3) {
		if (`.drag_point' != 2)  .y0 = `.y0' + `y_shift'
		if (`.drag_point' != 4)  .x0 = `.x0' + `x_shift'
	}

	if (`.drag_point' != 1 & `.drag_side' != 1 & `.drag_side' != 4) {
		if (`.drag_point' != 4)  .y1 = `.y1' + `y_shift'
		if (`.drag_point' != 2)	 .x1 = `.x1' + `x_shift'
	}
end


/*
// ----------------------------------------------------------------------------
// Possibly map supplied name to one appropriate for the object browser

program BrowserName
	args name

	if substr("`name'",1,17) == "added_rectangles[" {
		gettoken pre index: name , parse("[")
		class exit "added rectangles.rectangle`index'"
	}
end
*/
