/*
  rolling

*!  VERSION 1.2.6  08dec2016

*/

VERSION 14.0

INCLUDE _std_glm
INCLUDE _ht370
INCLUDE header

HELP hlp1, view("help rolling")
RESET res1

SCRIPT PREINIT
BEGIN
        setscale_hadj resource ROLLING_DLG_HSCALE
END

DIALOG main, tabtitle(resource LBL_TAB_MAIN)				///
	label(resource ROLLING_DLG_TITLE)
BEGIN
  DEFINE _y _top
  INCLUDE _cmd_exp_list

  TEXT	tx_bywindow	_lft	_xls	_cwd1	.,			///
	label(resource ROLLING_MAIN_TX_BYWINDOW)
  EDIT	ed_window	@	_ss	_vnwd	.,   	          	///
  	label(resource ROLLING_MAIN_ED_WINDOW)				///
  	option(window)
  TEXT	tx_span		_vnsep	@	_cksprb	.,   	          	///
	label(resource ROLLING_MAIN_ED_WINDOW)

  GROUPBOX gb_recur  _lft      _xls      _iwd      _ht6,		///
	label(resource ROLLING_MAIN_GB_RECUR)
  RADIO	rb_default	_ilft	_ss	_ibwd	_ht8,			///
	first label(resource ROLLING_MAIN_RB_DEFAULT) option(NONE)
  RADIO	rb_recur	@	_ss	@	.,			///
	label(resource ROLLING_MAIN_RB_RECUR) option(recursive)
  RADIO	rb_rrecur	@	_ss	@ 	.,			///
	last label(resource ROLLING_MAIN_RB_RRECUR) option(rrecursive)
END

INCLUDE ifin

INCLUDE weights_a

SCRIPT opt_PREINIT
BEGIN
        opt.fi_sav.formatfilter "{0} (*.dta)|*.dta|{1} (*.*)|*.*" ///
                "resource ui_ex FILE_TYPE_DTA" "resource ui_ex FILE_TYPE_ALL_FILES"
END

DIALOG opt, tabtitle(resource LBL_OPTIONS)
BEGIN
  RADIO	rb_default	_lft	_top	_iwd	_ht8,			///
	first label(resource LBL_REPLACE_DATA_IF_NOT_MODIFIED)		///
	option(NONE)							///
	onclickon(script opt_save_off)

  DEFINE holdx @x
  RADIO	rb_clear	@	_ss	@	., 			///
	option(clear)							///
	label(resource LBL_REPLACE_DATA_EVEN_IF_MODIFIED)		///
	onclickon(script opt_save_off)

  RADIO	rb_sav		@	_ss	@ 	.,			///
	last label(resource LBL_SAVE_RESULTS_FILE)			///
	onclickon(program opt_save_on)

  GROUPBOX gb_save	_lft	_ms	_iwd	_ht10, 			///
	label(resource LBL_SAVE)

  TEXT	tx_sav		_indent	_ss	_ibwd	.,			///
  	label(resource LBL_FILENAME)
  FILE	fi_sav		@	_ss	@	.,			///
	label(resource LBL_BU_BROWSE)					///
	option(saving)							///
	defext(dta)							///
	save								///
	error(resource LBL_FILENAME_TO_SAVE)
  CHECKBOX ck_double	@	_ls	_cwd2	.,			///
	label(resource LBL_SAVE_STATISTICS_DOUBLE_PRECISION)		///
	option(double)
  CHECKBOX ck_every	_ilft	_ms	_ckwd	.,			///
	onclickon(script opt_every_on)					///
	onclickoff(script opt_every_off)
  SPINNER sp_every	_cksep	@	_spwd	.,			///
	label(resource LBL_SAVE_EVERY_#)				///
	min(1)								///
	max(10000)							///
	default(1)							///
	option(every)
  TEXT	tx_every	_spsep	@	_cksprb	.,			///
	label(resource LBL_SAVE_RESULTS_FILE_EVERY_#TH_REP)

  TEXT	tx_optstepsize	_lft	+45	_cwd1	.,			///
	label(resource ROLLING_OPT_TX_OPTSTEPSIZE)
  SPINNER sp_stepsize	@	_ss	_spwd	.,			///
		label(resource ROLLING_OPT_SP_STEPSIZE)			///
		min(1)							///
		max(c(N))						///
		default(1)						///
		option(stepsize)
  TEXT	tx_stepsize	_spsep	@	_cksprb	.,   	          	///
  		label(resource ROLLING_OPT_SP_STEPSIZE)

  GROUPBOX gb_tol		_lft	+35	_cwd1	_ht6,		///
	label(resource ROLLING_OPT_GB_TOL)
  DEFINE holdy @y
  TEXT	tx_start	_ilft	_ms	40	.,			///
	label(resource ROLLING_OPT_TX_START) right
  EDIT	ed_start	+45	@	_en7r2b	.,   	          	///
  		label(resource ROLLING_OPT_TX_START)			///
  		option(start)
  TEXT	tx_end		_ilft	_ls	40	.,			///
	label(resource ROLLING_OPT_TX_END) right
  EDIT	ed_end		+45	@	_en7r2b	.,   	     	     	///
  		label(resource ROLLING_OPT_TX_END)			///
  		option(end)

  CHECKBOX ck_keep		_lft2	holdy	_cwd1	_ht6,		///
	label(resource ROLLING_OPT_CK_KEEP) groupbox			///
	onclickon(script opt_ck_keep_on)				///
	onclickoff(script opt_ck_keep_off)
  TEXT	tx_var		       _indent2	_ms	50	.,		///
	label(resource LBL_VARIABLE) right
  DEFINE holdx @x
  EDIT	ed_var			+55	@	_vnwd	.,   		///
  		label(resource LBL_VARIABLE)				///
  		option(variable)
  CHECKBOX ck_leftedge		holdx	_ls	_cwd4	.,		///
	label(resource ROLLING_OPT_CK_LEFTEDGE)
END

SCRIPT opt_ck_keep_on
BEGIN
	opt.tx_var.enable
	opt.ed_var.enable
	opt.ck_leftedge.enable
END

SCRIPT opt_ck_keep_off
BEGIN
	opt.tx_var.disable
	opt.ed_var.disable
	opt.ck_leftedge.disable
END

PROGRAM opt_save_on
BEGIN
	call opt.gb_save.enable
	call opt.fi_sav.enable
	call opt.ck_double.enable
	call opt.ck_every.enable
	call opt.tx_every.enable
	call opt.tx_sav.enable
	if opt.ck_every {
		call opt.sp_every.enable
	}
END

SCRIPT opt_save_off
BEGIN
	opt.gb_save.disable
	opt.fi_sav.disable
	opt.ck_double.disable
	opt.sp_every.disable
	opt.tx_every.disable
	opt.ck_every.disable
	opt.tx_sav.disable
END

SCRIPT opt_every_on
BEGIN
	opt.sp_every.enable
END

SCRIPT opt_every_off
BEGIN
	opt.sp_every.disable
END

SCRIPT rpt_POSTINIT
BEGIN
	create STRING rpt_bu_repl_logResults
	program rpt_bu_repl_log_ckResults
END


DIALOG rpt, tabtitle(resource LBL_TAB_REPORTING)
BEGIN
  DEFINE _x _lft
  DEFINE _y _top
  INCLUDE _bu_replication_log_opts
END

INCLUDE replication_log_opts_child_pr

PROGRAM rpt_output
BEGIN
	put " " rpt_bu_repl_logResults
END

DIALOG adv, tabtitle(resource LBL_ADVANCED)
BEGIN
  TEXT  tx_reject		_lft	_top	_iwd	.,		///
	label(resource LBL_IDENTIFY_INVALID_RESULTS)
  EDIT ed_reject		@	_ss	@	.,		///
	label(resource LBL_IDENTIFY_INVALID_RESULTS)			///
	option("reject")
END

PROGRAM check_legend
BEGIN
	if rpt.ck_nolegend {
		call gaction rpt.ck_verbose.disable
	}
	if !rpt.ck_nolegend {
		call gaction rpt.ck_verbose.enable
	}
END

PROGRAM rolling_options
BEGIN
	put "rolling "
	option main.ck_b
	option main.ck_se
	put " " main.ed_explst
 	INCLUDE _weights_pr
	INCLUDE _ifin_pr
	beginoptions
		require main.ed_window
		optionarg main.ed_window
		option main.rb_recur
		option main.rb_rrecur
		if opt.rb_sav {
			require opt.fi_sav
			repfile opt.fi_sav
			put `"saving("'
			put opt.fi_sav
			put `", "'
			optionarg opt.sp_every
			option opt.ck_double
			put "replace)"
		}
		if opt.rb_default {
			stopbox rusure resource LBL_MSGBOX_COMMAND_WILL_REPLACE_YOUR_DATA_IN_MEMORY
// This command will replace your data in memory. Do you wish to continue?
			put " clear "
		}
		option opt.rb_clear
		optionarg /hidedefault opt.sp_stepsize
		optionarg opt.ed_start
		optionarg opt.ed_end
		if opt.ck_keep {
			require opt.ed_var
			put `"keep("'
			put opt.ed_var
			if opt.ck_leftedge {
				put `", start"'
			}
			put ")"
		}
		put " " /program rpt_output
		optionarg adv.ed_reject
	endoptions
END

PROGRAM command
BEGIN
	require main.vl_cmd
	put /program rolling_options
	put " " " : "	/* end of prefix, begin command */
	put main.vl_cmd
END
