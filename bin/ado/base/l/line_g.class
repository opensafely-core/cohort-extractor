/*                                 line_g

	a view of a line

        This is a subview.  When drawn, assumes that the appropriate x and y
        scales have already been set.

*/
*! version 1.2.0  21nov2019

version 8

class {
	double x0
	double y0
	double x1
	double y1

	draw_view       = .yesno.new, style(yes)

	dragable	= 1
	drag_point	= (.)			// 0, 1, or other

	dialog = "arrow"

	class linestyle style
} , inherit(subview)


/*--------------------------------------------------------------------------*/
/*
	Usage:  .line_g.new x0 y0 x1 y1 [ , style(stylename) styleref(name|key)]

	if reference is specified the style is assigned by reference rather
	than by copying (by value)
*/

program new

	syntax anything(name=poslist id="4 position numbers") [ , 	/*
		*/ Style(passthru) STYLEREF(passthru) * ]

	.grid_dragable	= 0
	.deleted	= 0

	numlist "`poslist'" , min(4) max(4) missingok
	local poslist `r(numlist)'
	foreach d in x0 y0 x1 y1 {
		gettoken `d' poslist : poslist , parse(" ,")
		.`d' = (``d'')
	}

	if "`style'" == "" & "`styleref'" == "" {
		local style style(scheme)
	}

	.setstyle , `style' `styleref' `options'
end


// --------------------------------------------------------------------------

program draw
	args style

	if (! `.draw_view.istrue')  exit				// Exit

	if ("`style'" == "")  local style style

	.`style'.setgdifull

	gdi line `.x0' `.y0' `.x1' `.y1'
	.set_gdi_posn `.y0' `.x0' `.y1' `.x1'
end


// ---------------------------------------------------------------------------
// Returns true if the line is at the clicked position

program AtClickedPos

	class exit = `.at_pos `.`._Gr_Global.Container'.LocalClicked' 1 1 `.`._Gr_Global.Container'.drawn_gmult''
end


// ----------------------------------------------------------------------------
// Determine if a position is in/on the view

program at_pos
	args y x 	// ...

	if (! 0`.draw_view.istrue')  class exit = 0
	if (0`.locked')  	     class exit = 0	
	if (0`.Local.deleted' == 1)  class exit = 0	
							// Look for end points
	if (0`._at_end `0'')  local found 1
	else		      local found = `._at_line `0''

	if `found' {
		.found_y = `y'
		.found_x = `x'
	}

	class exit = `found'
end

program _at_end
	args y x ymult xmult gmult

	local yhalo = 2 * `ymult' / 2
	local xhalo = 2 * `xmult' / 2

	if `._Gr_Global.y_log' {		// handle log scales
		local y  = log(`y')
		local y0 = log(`.y0')
		local y1 = log(`.y1')
	}
	else if `._Gr_Global.y_atanh' {		// handle atanh scales
		local y  = atanh(`y')
		local y0 = atanh(`.y0')
		local y1 = atanh(`.y1')
	}
	else if `._Gr_Global.y_logit' {		// handle logit scales
		local y  = logit(`y')
		local y0 = logit(`.y0')
		local y1 = logit(`.y1')
	}
	else if `._Gr_Global.y_log1m' {		// handle log1m scales
		local y  = log1m(`y')
		local y0 = log1m(`.y0')
		local y1 = log1m(`.y1')
	}
	else {
		local y0 = `.y0'
		local y1 = `.y1'
	}
	if `._Gr_Global.x_log' {
		local x  = log(`x')
		local x0 = log(`.x0')
		local x1 = log(`.x1')
	}
	else if `._Gr_Global.x_atanh' {
		local x  = atanh(`x')
		local x0 = atanh(`.x0')
		local x1 = atanh(`.x1')
	}
	else if `._Gr_Global.x_logit' {
		local x  = logit(`x')
		local x0 = logit(`.x0')
		local x1 = logit(`.x1')
	}
	else if `._Gr_Global.x_log1m' {
		local x  = log1m(`x')
		local x0 = log1m(`.x0')
		local x1 = log1m(`.x1')
	}
	else {
		local x0 = `.x0'
		local x1 = `.x1'
	}

	if `y' - `yhalo' < `y0' & `y' + `yhalo' > `y0' {
		if `x' - `xhalo' < `x0' & `x' + `xhalo' > `x0' {
			.drag_point = 0
			class exit = 1
		}
	}

	if `y' - `yhalo' < `y1' & `y' + `yhalo' > `y1' {
		if `x' - `xhalo' < `x1' & `x' + `xhalo' > `x1' {
			.drag_point = 1
			class exit = 1
		}
	}

	.drag_point = (.)
	class exit = 0
end

program _at_line
	args yn x ymult xmult gmult

	local yscale = `xmult' / `ymult'
	local width = cond("`.style.classname'"=="linestyle",		///
			   0`.style.width.val', 0`.style.linestyle.width.val')
	local halo = max(`gmult'*`width', 1.6) * `xmult' / 2

	if `._Gr_Global.y_log' {		// handle log scales
		local yn = log(`yn')
		local y0 = log(`.y0')
		local y1 = log(`.y1')
	}
	else if `._Gr_Global.y_atanh' {		// handle atanh scales
		local yn = atanh(`yn')
		local y0 = atanh(`.y0')
		local y1 = atanh(`.y1')
	}
	else if `._Gr_Global.y_logit' {		// handle logit scales
		local yn = logit(`yn')
		local y0 = logit(`.y0')
		local y1 = logit(`.y1')
	}
	else if `._Gr_Global.y_log1m' {		// handle log1m scales
		local yn = log1m(`yn')
		local y0 = log1m(`.y0')
		local y1 = log1m(`.y1')
	}
	else {
		local y0 = `.y0'
		local y1 = `.y1'
	}
	if `._Gr_Global.x_log' {
		local x  = log(`x')
		local x0 = log(`.x0')
		local x1 = log(`.x1')
	}
	else if `._Gr_Global.x_atanh' {
		local x  = atanh(`x')
		local x0 = atanh(`.x0')
		local x1 = atanh(`.x1')
	}
	else if `._Gr_Global.x_logit' {
		local x  = logit(`x')
		local x0 = logit(`.x0')
		local x1 = logit(`.x1')
	}
	else if `._Gr_Global.x_log1m' {
		local x  = log1m(`x')
		local x0 = log1m(`.x0')
		local x1 = log1m(`.x1')
	}
	else {
		local x0 = `.x0'
		local x1 = `.x1'
	}

	local y  =  `yn' * `yscale'		// put y values on x's scale
	local y0 =  `y0' * `yscale'
	local y1 =  `y1' * `yscale'

						// compute tangent distance
	local mag = abs((`y1' - `y0')^2 + (`x1' - `x0')^2)

	if (`mag' == 0) {
	    local u = 0
	}
	else {
	    local u = ((`x'-`x0')*(`x1'-`x0') + (`y'-`y0')*(`y1'-`y0')) / ///
	    	      `mag'
	}

	if (`u' < 0 | `u' > 1)  class exit = 0		// False if not tangent

	local yt = `y0' + `u' * (`y1' - `y0')
	local xt = `x0' + `u' * (`x1' - `x0')

	local tangent_dist = sqrt((`y' - `yt')^2 + (`x' - `xt')^2)

	class exit = (`tangent_dist' < `halo')

end


// ----------------------------------------------------------------------------
// Return the currently selected end point

program DragPoint
	if (`.drag_point' == 0)  class exit "`.gdi_x0' `.gdi_y0'"
	else			 class exit "`.gdi_x1' `.gdi_y1'"
end

// ----------------------------------------------------------------------------
// Respond to a .DragTo by moving the position

program DragTo
	args y x

	if (`.drag_point' != 1) {
		.y0 = `.y0' + `y' - `.found_y'
		.x0 = `.x0' + `x' - `.found_x'
	}

	if (`.drag_point' != 0) {
		.y1 = `.y1' + `y' - `.found_y'
		.x1 = `.x1' + `x' - `.found_x'
	}
end


// ----------------------------------------------------------------------------
// Respond to a .DragBy by moving the position

program DragBy
	args y_shift x_shift

	if (`.drag_point' != 1) {
		.y0 = (`.y0') + `y_shift'			// sic ()
		.x0 = (`.x0') + `x_shift'
	}

	if (`.drag_point' != 0) {
		.y1 = (`.y1') + `y_shift'
		.x1 = (`.x1') + `x_shift'
	}
end


// ----------------------------------------------------------------------------
// Log any required setup for a Drag to be reproduced when the graph is 
// used, redone, or undone.

program DragSetup

	_gm_log .`._Gr_Global.edit_object'.drag_point = (`.drag_point')
end

// ----------------------------------------------------------------------------
// Possibly map supplied name to one appropriate for the object browser

program BrowserName
	args name

	if bsubstr("`name'",1,12) == "added_lines[" {
		gettoken pre index: name , parse("[")
		class exit "added lines.line`index'"
	}
end
