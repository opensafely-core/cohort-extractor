/*
  sg__variables_prop_flink.dlg

*!  VERSION 1.1.1  03jun2015

*/

VERSION 14.0
MODAL

INCLUDE _std_mlarge
DEFINE _dlght 465
INCLUDE header_sem_ed

DEFINE _clwd	15
DEFINE _wd	160
DEFINE _sep	+165
DEFINE _wd2	110
DEFINE _sep2	+115
DEFINE _cbwd	125
DEFINE _cbsep	+130

INCLUDE sg__common_output		/* routines necessary for output */

SCRIPT PREINIT
BEGIN
	script sg__common_output_init 	/* initialize output globals */

	create STRING OBJ
	create STRING sFLType
	create ARRAY toklist
	program setupOBJECT	

	create STRING sTemp
	create DOUBLE dTemp
	create STRING sOMAP
	create STRING sVarType		// observed(1) / latent(2) / other(<multiple>)
	create STRING sSrcType
	create STRING sSrcTypeOrig
	create STRING sIsExog
	create DOUBLE nSelected 
	create BOOLEAN bLatent		/* latent only 		*/
	create BOOLEAN bObserved	/* observed only 	*/
	create BOOLEAN bExogenous	/* exogenous only 	*/
	create BOOLEAN bEndogenous	/* endogenous only	*/

	program global_get_defaults
	setscale_hadj resource SG__VARIABLES_PROP_FLINK_DLG_HSCALE
END

PROGRAM setupOBJECT
BEGIN
	if ! __MESSAGE {
		stopbox stop resource LBL_MSGBOX_OBJECT_NOT_FOUND
// An unexpected error has occurred. Object not found.
		exit 198
	}
	call __MESSAGE.tokenize toklist
	call OBJ.setvalue class toklist[1]
	call sFLType.setvalue class toklist[2]
END

PROGRAM global_get_defaults
BEGIN
	call sSrcType.setvalue class .__SEMG.dbsettings.source
	call sSrcTypeOrig.setvalue class .__SEMG.dbsettings.source
	
	if (sSrcType.iseq("selected")) {
		call sSrcType.setvalue "nodestyle"
	}

	call nSelected.setvalue class .__SEMG.dbsettings.n_selected
	if (!nSelected) {
		call nSelected.setvalue 0
	}

	call bLatent.setfalse
	call bObserved.setfalse
	call sVarType.setvalue class .__SEMG.dbsettings.type
	// 1=observed, 2=latent, <multiple>
	if (sVarType.iseq("1")) { 
		call bObserved.settrue
	}
	if (sVarType.iseq("2")) {
		call bLatent.settrue
	}

	call bExogenous.setfalse
	call bEndogenous.setfalse
	call sIsExog.setvalue class .__SEMG.dbsettings.isexog
	// 1=exogenous, 0=endogenous, <multiple>
	if (sIsExog.iseq("1")) { 
		call bExogenous.settrue
	}
	if (sIsExog.iseq("0")) {
		call bEndogenous.settrue
	}
END

SCRIPT flink_PREINIT
BEGIN
	create STRING sBoxH
	create STRING sJust
	create STRING sBgap
	create STRING sOffsetX
	create STRING sOffsetY
	create STRING sFontSz
	create STRING sFontClr
	create STRING sFontFace
	create BOOLEAN bBold
	create BOOLEAN bItalic
	create STRING sCustomWidth
	create STRING sCustomOColor
	create STRING sCustomFColor
	
	program flink_get_defaults
END

SCRIPT flink_POSTINIT
BEGIN
	program flink_initialize_controls
END

PROGRAM flink_get_defaults
BEGIN
	call sOMAP.setvalue class sSrcType.value
	call sOMAP.append "_"
	call sOMAP.append class sFLType.value
	
	call sOMAP.withvalue sBoxH.setvalue class .__SEMG.dbsettings.@_ysize
	call sBoxH.withvalue flink.cb_boxht.setdefault "@"
	
	call sOMAP.withvalue sJust.setvalue class .__SEMG.dbsettings.@_justification
	call sJust.withvalue flink.cb_just.setdefault "@"

	call sOMAP.withvalue sBgap.setvalue class .__SEMG.dbsettings.@_gap
	call sBgap.withvalue flink.cb_bgap.setdefault "@"

	call sOMAP.withvalue sOffsetX.setvalue class .__SEMG.dbsettings.@_xoffset
	call sOffsetX.withvalue flink.cb_offset_x.setdefault "@"

	call sOMAP.withvalue sOffsetY.setvalue class .__SEMG.dbsettings.@_yoffset
	call sOffsetY.withvalue flink.cb_offset_y.setdefault "@"

	call sOMAP.withvalue sFontSz.setvalue class .__SEMG.dbsettings.@_size
	call sFontSz.withvalue flink.cb_fsize.setdefault "@"

	call sOMAP.withvalue sFontClr.setvalue class .__SEMG.dbsettings.@_color
	call sFontClr.withvalue flink.cb_fcolor.setdefault "@"

	call sOMAP.withvalue sFontFace.setvalue class .__SEMG.dbsettings.@_face
	call sFontFace.withvalue flink.cb_fface.setdefault "@"

	call sOMAP.withvalue sTemp.setvalue class .__SEMG.dbsettings.@_bold
	if (sTemp.iseq(2)) {
		call bBold.settrue
		call flink.ck_bold.setdefault 1
	}
	else {
		call bBold.setfalse
		call flink.ck_bold.setdefault 0
	}

	call sOMAP.withvalue sTemp.setvalue class .__SEMG.dbsettings.@_italic
	if (sTemp.iseq(2)) {
		call bItalic.settrue
		call flink.ck_italic.setdefault 1
	}
	else {
		call bItalic.setfalse
		call flink.ck_italic.setdefault 0
	}
	
	call sOMAP.withvalue sCustomWidth.setvalue class .__SEMG.dbsettings.@_ln_width
	call sCustomWidth.withvalue flink.cb_owidth.setdefault "@"

	call sOMAP.withvalue sCustomOColor.setvalue class .__SEMG.dbsettings.@_ln_color
	call sCustomOColor.withvalue flink.cb_ocolor.setdefault "@"

	call sOMAP.withvalue sCustomFColor.setvalue class .__SEMG.dbsettings.@_fillcolor
	call sCustomFColor.withvalue flink.cb_fcolor.setdefault "@"
END

PROGRAM flink_initialize_controls
BEGIN
	call flink.cb_boxht.setvalue class sBoxH.value
	call flink.cb_just.setvalue class sJust.value
	call flink.cb_bgap.setvalue class sBgap.value
	call flink.cb_offset_x.setvalue class sOffsetX.value
	call flink.cb_offset_y.setvalue class sOffsetY.value
	call flink.cb_fsize.setvalue class sFontSz.value
	call flink.cb_fcolor.setvalue class sFontClr.value
	call flink.cb_fface.setvalue class sFontFace.value
	
	if (bBold) {
		call flink.ck_bold.seton
	}
	else {
		call flink.ck_bold.setoff
	}
	if (bItalic) {
		call flink.ck_italic.seton
	}
	else {
		call flink.ck_italic.setoff
	}
	
	call flink.cb_owidth.setvalue class sCustomWidth.value
	call flink.cb_ocolor.setvalue class sCustomOColor.value
	call flink.cb_fcolor.setvalue class sCustomFColor.value
	
	
	/* initialize enabled/disabled ... */
	if (sFLType.iseq("fancybox")) {
		call script fancy_on
	}
	else {
		call script fancy_off
	}
END

SCRIPT fancy_on
BEGIN
	flink.gb_placement.disable
	flink.tx_just.disable
	flink.cb_just.disable
	flink.tx_bgap.disable
	flink.cb_bgap.disable
	flink.tx_bgap_m.disable
	flink.tx_offset.disable
	flink.cb_offset_x.disable
	flink.cb_offset_y.disable
	flink.tx_offset_m.disable
	flink.gb_font.disable
 	flink.tx_fsize.disable
 	flink.cb_fsize.disable
	flink.tx_fsize_m.disable
	flink.tx_fcolor.disable
	flink.cb_fcolor.disable
	flink.tx_fface.disable
	flink.cb_fface.disable
	flink.ck_bold.disable
	flink.ck_italic.disable
END

SCRIPT fancy_off
BEGIN
	flink.gb_placement.enable
	flink.tx_just.enable
	flink.cb_just.enable
	flink.tx_bgap.enable
	flink.cb_bgap.enable
	flink.tx_bgap_m.enable
	flink.tx_offset.enable
	flink.cb_offset_x.enable
	flink.cb_offset_y.enable
	flink.tx_offset_m.enable
	flink.gb_font.enable
 	flink.tx_fsize.enable
 	flink.cb_fsize.enable
	flink.tx_fsize_m.enable
	flink.tx_fcolor.enable
	flink.cb_fcolor.enable
	flink.tx_fface.enable
	flink.cb_fface.enable
	flink.ck_bold.enable
	flink.ck_italic.enable
END


PROGRAM check_custom_box
BEGIN
	if flink.ck_cbox {
		call flink.tx_owidth.enable
		call flink.cb_owidth.enable
		call flink.tx_width_m.enable
		call flink.tx_ocolor.enable
		call flink.cb_ocolor.enable
		call flink.tx_fillcolor.enable
		call flink.cb_fillcolor.enable
	}
	else {
		call flink.tx_owidth.disable
		call flink.cb_owidth.disable
		call flink.tx_width_m.disable
		call flink.tx_ocolor.disable
		call flink.cb_ocolor.disable
		call flink.tx_fillcolor.disable
		call flink.cb_fillcolor.disable
	}
END

DIALOG flink, title(resource SG__VARIABLES_PROP_FLINK_TAB_FLINK)
BEGIN

  GROUPBOX gb_box	_lft	_top	_iwd	_ht2h,		///
	label(resource LBL_TAB_BOX)
  TEXT     tx_boxht	_ilft	_ss	_wd	.,		///
	label(resource SG__VARIABLES_PROP_FLINK_FLINK_TX_BOXHT) right
  COMBOBOX cb_boxht	_sep	@	80	., nomemory	///
	dropdown contents(.__SEM_STYLES_LABEL.size)		///
	values(.__SEM_STYLES.size)
  TEXT     tx_boxht_m	+85	@	50	.,		///
	label(resource LBL_PAREN_IN_PAREN)


  GROUPBOX gb_placement	_lft	+45	_iwd	_ht8,		///
	label(resource LBL_TEXT_PLACEMENT)

  TEXT     tx_just	_ilft	_ss	_wd	.,		///
	label(resource LBL_JUSTIFICATION) right
  COMBOBOX cb_just	_sep	@	80	., nomemory	///
	dropdown contents(.__SEM_STYLES_LABEL.justification)	///
	values(.__SEM_STYLES.justification)

  TEXT     tx_bgap	_ilft	_mls	_wd	.,		///
	label(resource LBL_BOUNDARY_GAP) right
  COMBOBOX cb_bgap	_sep	@	80	., nomemory	///
	dropdown contents(.__SEM_STYLES_LABEL.pointsize)	///
	values(.__SEM_STYLES.pointsize)
  TEXT     tx_bgap_m	+85	@	50	.,		///
	label(resource LBL_PT)

  TEXT     tx_offset	_ilft	_mls	_wd	.,		///
	label(resource LBL_OFFSET) right 
  COMBOBOX cb_offset_x	_sep	@	80	., nomemory	///
	tooltip(resource LBL_X_OFFSET_NO_COLON) dropdown	///
	contents(.__SEM_STYLES_LABEL.pointsize)			///
	values(.__SEM_STYLES.pointsize)
  COMBOBOX cb_offset_y	+85	@	80	., nomemory	///
	tooltip(resource LBL_Y_OFFSET_NO_COLON) dropdown	///
	contents(.__SEM_STYLES_LABEL.pointsize)			///
	values(.__SEM_STYLES.pointsize)
  TEXT     tx_offset_m	+85	@	50	.,		///
	label(resource LBL_PT)


  GROUPBOX gb_font	_lft	+45	_iwd	_ht10h,		///
	label(resource LBL_FONT)
  TEXT     tx_fsize	_ilft	_ss	_wd	.,		///
	label(resource LBL_SIZE) right
  COMBOBOX cb_fsize	_sep	@	80	., nomemory	///
	dropdown contents(.__SEM_STYLES_LABEL.pointsize)	///
	values(.__SEM_STYLES.pointsize)
  TEXT     tx_fsize_m	+85	@	50	.,		///
	label(resource LBL_PT)

  TEXT     tx_fcolor	_ilft	_mls	_wd	.,		///
	label(resource LBL_FONT_COLOR) right
  COMBOBOX cb_fcolor	_sep	@	_cbwd	., nomemory	///
	dropdown contents(.__SEM_STYLES_LABEL.color)		///
	values(.__SEM_STYLES.color)

  TEXT     tx_fface	_ilft	_mls	_wd	.,		///
	label(resource LBL_FONT_FACE) right
  COMBOBOX cb_fface	_sep	@	_cbwd	., nomemory	///
	dropdown contents(.__SEM_STYLES_LABEL.face)		///
	values(.__SEM_STYLES.face)

  CHECKBOX ck_bold	@	_mls	60	., nomemory	///
	label(resource LBL_BOLD) 
  CHECKBOX ck_italic	+65	@	_wd	., nomemory	///
	label(resource LBL_ITALIC) 


  CHECKBOX ck_cbox	_lft	+40	_iwd	_ht8,		///
	label(resource SG__VARIABLES_PROP_FLINK_FLINK_CK_CBOX) groupbox	///
	onclickon(program check_custom_box)			///
	onclickoff(program check_custom_box)

  TEXT     tx_owidth	_ilft	_ss	_wd	.,		///
	label(resource LBL_OUTLINE_WIDTH) right
  COMBOBOX cb_owidth	_sep	@	_cbwd	., nomemory	///
	dropdown contents(.__SEM_STYLES_LABEL.width)		///
	values(.__SEM_STYLES.width)
  TEXT     tx_width_m	_cbsep	@	50	.,		///
	label(resource LBL_PT)

  TEXT     tx_ocolor	_ilft	_mls	_wd	.,		///
	label(resource LBL_OUTLINE_COLOR) right
  COMBOBOX cb_ocolor	_sep	@	_cbwd	., nomemory	///
	dropdown contents(.__SEM_STYLES_LABEL.color)		///
	values(.__SEM_STYLES.color)

  TEXT     tx_fillcolor	_ilft	_mls	_wd	.,		///
	label(resource LBL_FILL_COLOR) right
  COMBOBOX cb_fillcolor	_sep	@	_cbwd	., nomemory	///
	dropdown contents(.__SEM_STYLES_LABEL.color)		///
	values(.__SEM_STYLES.color)
END

PROGRAM flink_output
BEGIN
	call program flink_get_defaults

	call create STRING flinkTmp
	if (sSrcType.iseq("nodestyle")) {
		call flinkTmp.setvalue "SetStyleSelected"
	}
	else { 
		call flinkTmp.setvalue "SetStyle"
	}

	if (flink.cb_boxht.isenabled() & !flink.cb_boxht.isdefault()) {
		call dTemp.setvalue class flink.cb_boxht.value
		call sTemp.setvalue class flink.cb_boxht.value
		if (!dTemp & dTemp.isneq(0) & sTemp.isneq("<multiple>")) {
			call create STRING _MSG_TMP
                        call _MSG_TMP.format 				///
				"resource LBL_MSGBOX_CONTAINS_A_NONNUMERIC_VALUE_FMT" ///
				"resource SG__VARIABLES_PROP_FLINK_FLINK_TX_BOXHT"
			 stopbox stop "class _MSG_TMP.value"
// "Box height" contains a nonnumeric value.
		}
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".ysize"
		call sg__ARG_01.setvalue class flink.cb_boxht.value
		put /program sg__do_output_sub
	}

	if (flink.cb_just.isenabled() & !flink.cb_just.isdefault()) {
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".justification"
		call sg__ARG_01.setvalue class flink.cb_just.value
		put /program sg__do_output_sub
	}

	if (flink.cb_bgap.isenabled() & !flink.cb_bgap.isdefault()) {
		call dTemp.setvalue class flink.cb_bgap.value
		call sTemp.setvalue class flink.cb_bgap.value
		if (!dTemp & dTemp.isneq(0) & sTemp.isneq("<multiple>")) {
                        call create STRING _MSG_TMP
                        call _MSG_TMP.format 				///
				"resource LBL_MSGBOX_CONTAINS_A_NONNUMERIC_VALUE_FMT" ///
				"resource LBL_BOUNDARY_GAP"
                         stopbox stop "class _MSG_TMP.value"
// "Boundary gap" contains a nonnumeric value.
		}
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".gap"
		call sg__ARG_01.setvalue class flink.cb_bgap.value
		put /program sg__do_output_sub
	}

	if (flink.cb_offset_x.isenabled() & !flink.cb_offset_x.isdefault()) {
		call dTemp.setvalue class flink.cb_offset_x.value
		call sTemp.setvalue class flink.cb_offset_x.value
		if (!dTemp & dTemp.isneq(0) & sTemp.isneq("<multiple>")) {
                        call create STRING _MSG_TMP
                        call _MSG_TMP.format 				///
				"resource LBL_MSGBOX_CONTAINS_A_NONNUMERIC_VALUE_FMT" ///
				"resource LBL_OFFSET"
                        stopbox stop "class _MSG_TMP.value"
// "Offset" contains a nonnumeric value.
		}
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".xoffset"
		call sg__ARG_01.setvalue class flink.cb_offset_x.value
		put /program sg__do_output_sub
	}
	if (flink.cb_offset_y.isenabled() & !flink.cb_offset_y.isdefault()) {
		call dTemp.setvalue class flink.cb_offset_y.value
		call sTemp.setvalue class flink.cb_offset_y.value
		if (!dTemp & dTemp.isneq(0) & sTemp.isneq("<multiple>")) {
                        call create STRING _MSG_TMP
                        call _MSG_TMP.format 				///
				"resource LBL_MSGBOX_CONTAINS_A_NONNUMERIC_VALUE_FMT" ///
				"resource LBL_OFFSET"
                        stopbox stop "class _MSG_TMP.value"
// "Offset" contains a nonnumeric value.
		}
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".yoffset"
		call sg__ARG_01.setvalue class flink.cb_offset_y.value
		put /program sg__do_output_sub
	}

	
	if (flink.cb_fsize.isenabled() & !flink.cb_fsize.isdefault()) {
		call dTemp.setvalue class flink.cb_fsize.value
		call sTemp.setvalue class flink.cb_fsize.value
		if (!dTemp & dTemp.isneq(0) & sTemp.isneq("<multiple>")) {
                        call create STRING _MSG_TMP
                        call _MSG_TMP.format				/// 
				"resource SG__VARIABLES_PROP_FLINK_MSGBOX_FONT_NONNUMERIC_VALUE_FMT" ///
				"resource LBL_TAB_SIZE"
			 stopbox stop "class _MSG_TMP.value"
// The font "Size" contains a nonnumeric value.
		}
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".size"
		call sg__ARG_01.setvalue class flink.cb_fsize.value
		put /program sg__do_output_sub
	}

	if (flink.cb_fcolor.isenabled() & !flink.cb_fcolor.isdefault()) {
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".color"
		call sg__ARG_01.setvalue class flink.cb_fcolor.value
		put /program sg__do_output_sub
	}

	if (flink.cb_fface.isenabled() & !flink.cb_fface.isdefault()) {
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".face"
		call sg__ARG_01.setvalue class flink.cb_fface.value
		put /program sg__do_output_sub
	}

	if (flink.ck_bold.isenabled() & !flink.ck_bold.isdefault()) {
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".bold"
		if flink.ck_bold {
			call sg__ARG_01.setvalue "yes"
		}
		else {
			call sg__ARG_01.setvalue "no"
		}
		put /program sg__do_output_sub
	}

	if (flink.ck_italic.isenabled() & !flink.ck_italic.isdefault()) {
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".italic"
		if flink.ck_italic {
			call sg__ARG_01.setvalue "yes"
		}
		else {
			call sg__ARG_01.setvalue "no"
		}
		put /program sg__do_output_sub
	}

	if (flink.cb_owidth.isenabled() & !flink.cb_owidth.isdefault()) {
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".ln.width"
		call sg__ARG_01.setvalue class flink.cb_owidth.value
		put /program sg__do_output_sub
	}

	if (flink.cb_ocolor.isenabled() & !flink.cb_ocolor.isdefault()) {
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".ln.color"
		call sg__ARG_01.setvalue class flink.cb_ocolor.value
		put /program sg__do_output_sub
	}

	if (flink.cb_fcolor.isenabled() & !flink.cb_fcolor.isdefault()) {
		call sg__PARAM2.setvalue class flinkTmp.value
		call sg__ARG_00.setvalue class sSrcType.value
		call sg__ARG_00.append "."
		call sg__ARG_00.append class sFLType.value
		call sg__ARG_00.append ".fillcolor"
		call sg__ARG_01.setvalue class flink.cb_fcolor.value
		put /program sg__do_output_sub
	}
END

PROGRAM send_update_signal
BEGIN
	call sg__PARAM1.setvalue class OBJ.value
	call sg__PARAM2.setvalue "UpdateDlg"
	call sg__ARG_00.setvalue "variables_prop"
	call sg__ARG_01.setvalue class sSrcTypeOrig.value
	put /program sg__do_output_sub
END

PROGRAM command
BEGIN
	call sg__PARAM1.setvalue class OBJ.value
	
	call sg__PARAM2.setvalue "BeginSet"
	call sg__DESCPT.setvalue "change variables' appearance"
	put /program sg__do_output_sub
	
	put /program flink_output

	call sg__PARAM2.setvalue "EndSet"
	call sg__DESCPT.setvalue "change variables' appearance"
	put /program sg__do_output_sub

	call program send_update_signal
END
