/*
  stset INCLUDE file

*!  VERSION 1.1.2  09may2017

*/

  TEXT     tx_t      _lft      _top      _cwd3_2     .,			/*
		*/ label(resource LBL_TIME_VARIABLE)			/*
		*/
  VARNAME  vn_t      @         _ss       _vnwd     .,			/*
		*/ label(resource LBL_TIME_VARIABLE)			/*
		*/ option("t")						/*
		*/ default(char _dta[st_bt])				/*
		*/ numeric						/*
		*/ nomemory						/*
		*/

  CHECKBOX ck_id     _lft3_2   _top      _cwd1     .,			/*
		*/ label(resource STSET_CK_ID)				/*
		*/ clickon("script id_on")				/*
		*/ clickoff("script id_off")				/*
		*/
  DEFINE y @y
  VARNAME  vn_id     @         _ss       _vnwd     .,			/*
		*/ label(resource STSET_CK_ID)				/*
		*/ default(char _dta[st_id])				/*
		*/ nomemory						/*
		*/ option("id")						/*
		*/

  GROUPBOX gb_fail   _lft      +35       _iwd      _ht4h,		/*
		*/ label(resource STSET_VN_ID)				/*
		*/
  TEXT     tx_fail   _ilft     _ss       _cwd1     .,			/*
		*/ label(resource LBL_FAILURE_VARIABLE)			/*
		*/
  DEFINE y @y
  VARNAME  vn_fail   @         _ss       _vnwd     .,			/*
		*/ label(resource LBL_FAILURE_VARIABLE)			/*
		*/ default(char _dta[st_bd])				/*
		*/ numeric						/*
		*/ nomemory						/*
		*/
  TEXT     tx_fail2  _ilft3_2  y         _vnwd     .,			/*
		*/ label(resource STSET_GB_FAIL)			/*
		*/
  EDIT     ed_fail   @         _ss       _vnwd     .,			/*
		*/ label(resource STSET_GB_FAIL)			/*
		*/ default(char _dta[st_ev])				/*
		*/ nomemory						/*
		*/

  CHECKBOX ck_noshow _lft      +45       _cwd2     .,			/*
		*/ label(resource LBL_DO_NOT_SHOW_ST_SETTING_INFORMATION)		/*
		*/ option("noshow")					/*
		*/
  CHECKBOX ck_clear  _lft      _ms       _cwd1     .,			/*
		*/ label(resource STSET_CK_CLEAR)				/*
		*/ clickon("script clear_on")				/*
		*/ clickoff("script clear_off")				/*
		*/ option("clear")					/*
		*/ nomem

END

PROGRAM stset_check_single
BEGIN
	call main.ck_id.setoff
	call main.ck_id.disable
	call main.vn_id.disable
	call opt.tx_enexp.disable
	call opt.ed_enexp.disable
	call opt.tx_exit.disable
	call opt.ed_exexp.disable
	call adv.tx_if.disable
	call adv.ed_if.disable
	call adv.tx_time0.disable
	call adv.vn_time0.disable
END

PROGRAM check_id
BEGIN
	if main.ck_id {
		call script id_on
	}
	if ! main.ck_id {
		call script id_off
	}
END

PROGRAM check_ormin
BEGIN
	if opt.ck_ormin {
		call script ormin_on
	}
	if ! ((opt.ck_ormin) |  D(opt.ck_ormin)) {
		call script ormin_off
	}
END

SCRIPT id_on
BEGIN
	main.vn_id.enable
	opt.tx_origin.enable
	opt.vn_origin.enable
	opt.tx_ornl.enable
	opt.ed_ornl.enable
	opt.ck_ormin.enable
	program check_ormin
	opt.tx_enter.enable
	opt.vn_enter.enable
	opt.tx_ennl.enable
	opt.ed_ennl.enable
	opt.tx_enexp.enable
	opt.ed_enexp.enable
	opt.tx_exit.enable
	opt.vn_exit.enable
	opt.tx_exnl.enable
	opt.ed_exnl.enable
	opt.tx_exexp.enable
	opt.ed_exexp.enable
	adv.tx_ever.enable
	adv.ed_ever.enable
	adv.tx_never.enable
	adv.ed_never.enable
	adv.tx_after.enable
	adv.ed_after.enable
	adv.tx_before.enable
	adv.ed_before.enable
END

SCRIPT id_off
BEGIN
	main.vn_id.disable
	opt.tx_origin.disable
	opt.vn_origin.disable
	opt.tx_ornl.disable
	opt.ed_ornl.disable
	opt.tx_orexp.enable
	opt.ed_orexp.enable
	opt.ck_ormin.disable
	opt.tx_enter.disable
	opt.vn_enter.disable
	opt.tx_ennl.disable
	opt.ed_ennl.disable
	opt.tx_enexp.enable
	opt.ed_enexp.enable
	opt.tx_exit.disable
	opt.vn_exit.disable
	opt.tx_exnl.disable
	opt.ed_exnl.disable
	opt.tx_exexp.enable
	opt.ed_exexp.enable
	adv.tx_ever.disable
	adv.ed_ever.disable
	adv.tx_never.disable
	adv.ed_never.disable
	adv.tx_after.disable
	adv.ed_after.disable
	adv.tx_before.disable
	adv.ed_before.disable
END

SCRIPT clear_on
BEGIN
	main.tx_t.disable
	main.vn_t.disable
	main.ck_id.disable
	main.vn_id.disable
	main.gb_fail.disable
	main.tx_fail.disable
	main.vn_fail.disable
	main.tx_fail2.disable
	main.ed_fail.disable
	opt.tx_scale.disable
	opt.en_scale.disable
	main.ck_noshow.disable
	program disable_sub
	program disable_weights
	opt.gb_origin.disable
	opt.tx_origin.disable
	opt.vn_origin.disable
	opt.tx_ornl.disable
	opt.ed_ornl.disable
	opt.tx_orexp.disable
	opt.ed_orexp.disable
	opt.ck_ormin.disable
	opt.gb_enter.disable
	opt.tx_enter.disable
	opt.vn_enter.disable
	opt.tx_ennl.disable
	opt.ed_ennl.disable
	opt.tx_enexp.disable
	opt.ed_enexp.disable
	opt.gb_exit.disable
	opt.tx_exit.disable
	opt.vn_exit.disable
	opt.tx_exnl.disable
	opt.ed_exnl.disable
	opt.tx_exexp.disable
	opt.ed_exexp.disable
	adv.tx_if.disable
	adv.ed_if.disable
	adv.tx_ever.disable
	adv.ed_ever.disable
	adv.tx_never.disable
	adv.ed_never.disable
	adv.tx_after.disable
	adv.ed_after.disable
	adv.tx_before.disable
	adv.ed_before.disable
	adv.tx_time0.disable
	adv.vn_time0.disable
END

SCRIPT clear_off
BEGIN
	main.tx_t.enable
	main.vn_t.enable
	main.ck_id.enable
	program check_id
	main.gb_fail.enable
	main.tx_fail.enable
	main.vn_fail.enable
	main.tx_fail2.enable
	main.ed_fail.enable
	opt.tx_scale.enable
	opt.en_scale.enable
	main.ck_noshow.enable
	program enable_sub
	program enable_weights
	opt.gb_origin.enable
	opt.gb_enter.enable
	opt.gb_exit.enable
	adv.tx_if.enable
	adv.ed_if.enable
	adv.tx_time0.enable
	adv.vn_time0.enable
END

DIALOG if, tabtitle(resource LBL_IF)
BEGIN
  TEXT     tx_warn	_lft	_top	_iwd	.,		///
	label(resource STSET_IF_TX_WARN)
  GROUPBOX gb_if	_lft	_ls	_iwd	_ht4h,		///
	label(resource LBL_RESTRICT_OBS)
  TEXT     tx_if	_ilft	_ss	_ibwd	.,		///
	label(resource LBL_IF_EXPRESSION)
  EXP      ex_if	@	_ss	_ibwd	.,		///
	label(resource LBL_BU_CREATE)
END

INCLUDE weights

DIALOG opt, tabtitle(resource LBL_OPTIONS)
BEGIN
  GROUPBOX gb_origin         _lft      _top      _iwd      _ht9,	///
		label(resource STSET_OPT_GB_ORIGIN)
  TEXT     tx_origin _ilft   _ss       _cwd3_2   .,			///
		label(resource STSET_OPT_TX_ORIGIN)
  DEFINE y @y
  VARNAME  vn_origin         @         _ss       _vnwd     .,		///
		label(resource STSET_OPT_TX_ORIGIN)			///
		numeric							///
		default(char _dta[st_orvn])
  TEXT     tx_ornl           _ilft3_2  y         _cwd3_2   .,		///
		label(resource STSET_OPT_TX_ORNL)
  EDIT     ed_ornl           @         _ss       _vnwd     .,		///
		label(resource STSET_OPT_TX_ORNL)			///
		default(char _dta[st_ornl])

  TEXT     tx_orexp          _ilft3_3  y         _cwd3_2   .,		///
		label(resource STSET_OPT_TX_OREXP)
  EDIT     ed_orexp          @         _ss       _vnwd     .,		///
		label(resource STSET_OPT_TX_OREXP)			///
		default(char _dta[st_orexp])

  CHECKBOX ck_ormin          _ilft     +45       _comb3_1  .,		///
		onclickon(program check_ormin)				///
		onclickoff(program check_ormin)				///
		option(origin(min))					///
		label(resource STSET_OPT_CK_ORMIN)
  TEXT     tx_scale          _ilft3_3  -20       _cwd3_2   .,		///
		label(resource STSET_OPT_TX_SCALE)
  EDIT     en_scale          @         _ss       _en14wd   .,		///
		label(resource STSET_OPT_EN_SCALE)			///
		numonly							///
		option(scale)						///
		default(char _dta[st_bs])				///
		nomemory

  GROUPBOX gb_enter          _lft      +45       _iwd      _ht4h,	///
		label(resource STSET_OPT_GB_ENTER)
  TEXT     tx_enter          _ilft     _ss       _cwd3_2   .,		///
		label(resource LBL_ENTER_VARIABLE)
  DEFINE y @y
  VARNAME  vn_enter          @         _ss       _vnwd     .,		///
		label(resource LBL_ENTER_VARIABLE)			///
		numeric							///
		default(char _dta[st_envn])
  TEXT     tx_ennl           _ilft3_2  y         _cwd3_2   .,		///
		label(resource STSET_OPT_TX_ENNL)
  EDIT     ed_ennl           @         _ss       _vnwd     .,		///
		label(resource STSET_OPT_TX_ENNL)			///
		default(char _dta[st_ennl])
  TEXT     tx_enexp          _ilft3_3  y         _cwd3_2   .,		///
		label(resource STSET_OPT_TX_ENEXP)
  EDIT     ed_enexp          @         _ss       _vnwd     .,		///
		label(resource STSET_OPT_TX_ENEXP)			///
		default(char _dta[st_enexp])

  GROUPBOX gb_exit           _lft      +45       _iwd      _ht4h,	///
		label(resource STSET_OPT_GB_EXIT)
  TEXT     tx_exit           _ilft     _ss       _cwd3_2   .,		///
		label(resource STSET_OPT_TX_EXIT)
  DEFINE y @y
  VARNAME  vn_exit           @         _ss       _vnwd     .,		///
		label(resource STSET_OPT_TX_EXIT)			///
		numeric							///
		default(char _dta[st_exvn])
  TEXT     tx_exnl           _ilft3_2  y         _cwd3_2   .,		///
		label(resource STSET_OPT_TX_EXNL)
  EDIT     ed_exnl           @         _ss       _vnwd     .,		///
		label(resource STSET_OPT_TX_EXNL)			///
		default(char _dta[st_exnl])
  TEXT     tx_exexp          _ilft3_3  y         _cwd3_2   .,		///
		label(resource STSET_OPT_TX_EXEXP)
  EDIT     ed_exexp          @         _ss       _vnwd     .,		///
		label(resource STSET_OPT_TX_EXEXP)			///
		default(char _dta[st_exexp])
END

SCRIPT ormin_on
BEGIN
	opt.tx_origin.disable
	opt.vn_origin.disable
	opt.tx_ornl.disable
	opt.ed_ornl.disable
	opt.tx_orexp.disable
	opt.ed_orexp.disable
END

SCRIPT ormin_off
BEGIN
	opt.tx_origin.enable
	opt.vn_origin.enable
	opt.tx_ornl.enable
	opt.ed_ornl.enable
	opt.tx_orexp.enable
	opt.ed_orexp.enable
END

DIALOG adv, label("") tabtitle(resource LBL_ADVANCED)
BEGIN
  /*--+----1----+----2----+----3----+----4----+----5----+----6----+----7----+*/
  TEXT     tx_if     _lft      _top      _cwd1     .,			/*
		*/ label(resource STSET_ADV_TX_IF)			/*
		*/
  EDIT     ed_if     @         _ss       _cwd1     .,			/*
		*/ label(resource STSET_ADV_TX_IF)			/*
		*/ option("if")						/*
		*/ default(char _dta[st_if])				/*
		*/

  TEXT     tx_time0  _lft2     _top      _cwd1     .,			/*
		*/ label(resource STSET_ADV_TX_TIME0)			/*
		*/
  VARNAME  vn_time0  @         _ss       _vnwd     .,			/*
		*/ label(resource STSET_ADV_VN_TIME0)			/*
		*/ option("time0")					/*
		*/ default(char _dta[st_bt0])				/*
		*/ numeric						/*
		*/

  TEXT     tx_ever   _lft      _ls       _iwd      .,			/*
		*/ label(resource STSET_ADV_TX_EVER)			/*
		*/
  EDIT     ed_ever   @         _ss       _cwd1     .,			/*
		*/ label(resource STSET_ADV_TX_EVER)			/*
		*/ option("ever")					/*
		*/ default(char _dta[st_ever])				/*
		*/

  TEXT     tx_never  _lft      _ls       _iwd      .,			/*
		*/ label(resource STSET_ADV_TX_NEVER)			/*
		*/
  EDIT     ed_never  @         _ss       _cwd1     .,			/*
		*/ label(resource STSET_ADV_TX_NEVER)			/*
		*/ option("never")					/*
		*/ default(char _dta[st_never])				/*
		*/

  TEXT     tx_after  _lft      _ls       _iwd      .,			/*
		*/ label(resource STSET_ADV_TX_AFTER)			/*
		*/
  EDIT     ed_after  @         _ss       _cwd1     .,			/*
		*/ label(resource STSET_ADV_TX_AFTER)			/*
		*/ option("after")					/*
		*/ default(char _dta[st_after])				/*
		*/

  TEXT     tx_before _lft      _ls       _iwd      .,			/*
		*/ label(resource STSET_ADV_TX_BEFORE)			/*
		*/
  EDIT     ed_before @         _ss       _cwd1     .,			/*
		*/ label(resource STSET_ADV_TX_BEFORE)			/*
		*/ option("before")					/*
		*/ default(char _dta[st_befor])				/*
		*/

END

PROGRAM command
BEGIN
	if isMI {
		put "mi "
	}
	put "stset "
	if main.ck_clear {
		beginoptions
			option main.ck_clear
		endoptions
	}
	if !main.ck_clear {
		varlist main.vn_t
		ifexp if.ex_if
		INCLUDE _weights_pr
		beginoptions
			optionarg main.vn_id
			if main.ck_id {
				require main.vn_id
				require main.vn_fail
			}
			if main.vn_fail | main.ed_fail {
				put "failure(" main.vn_fail
				if main.ed_fail {
					require main.vn_fail
					put "==" main.ed_fail
				}
				put ") "
			}
			optionarg adv.vn_time0
			if opt.vn_enter | opt.ed_ennl | opt.ed_enexp {
				put "enter("
				if opt.vn_enter | opt.ed_ennl {
					require opt.vn_enter
					require opt.ed_ennl
					put opt.vn_enter "==" opt.ed_ennl
				}
				if opt.vn_enter & opt.ed_enexp {
					put " "
				}
				if opt.ed_enexp {
					put "time " opt.ed_enexp
				}
				put ") "
			}
			if opt.vn_exit | opt.ed_exnl | opt.ed_exexp {
				put "exit("
				if opt.vn_exit | opt.ed_exnl {
					require opt.vn_exit
					require opt.ed_exnl
					put opt.vn_exit "==" opt.ed_exnl
				}
				if opt.vn_exit & opt.ed_exexp {
					put " "
				}
				if opt.ed_exexp {
					put "time " opt.ed_exexp
				}
				put ") "
			}
			option opt.ck_ormin
			if !opt.ck_ormin & /*
			*/ (opt.vn_origin | opt.ed_ornl | opt.ed_orexp) {
				put "origin("
				if opt.vn_origin | opt.ed_ornl {
					require opt.vn_origin
					require opt.ed_ornl
					put opt.vn_origin "==" opt.ed_ornl
				}
				if opt.vn_origin & opt.ed_orexp {
					put " "
				}
				if opt.ed_orexp {
					put "time " opt.ed_orexp
				}
				put ") "
			}
			optionarg opt.en_scale
			optionarg adv.ed_if
			optionarg adv.ed_ever
			optionarg adv.ed_never
			optionarg adv.ed_after
			optionarg adv.ed_before
			option main.ck_noshow
		endoptions
	}
END
