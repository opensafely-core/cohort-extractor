//				pieview
//
//  class that redirects a .draw to a pie graphs pie drawing program. 
//  Also provides the interface to legends.

*! version 1.1.0  16jan2007

version 8

class {
	piegraph = ""				// key of the piegraph
	type	 = .pietype_g.new , style(pie)	// for yxkey_g
} , inherit(subview)

program new
	syntax , piegraph(string) [ * ]

	.Super.new , `options'
	.piegraph = "`.`piegraph'.objkey'"
	.deleted = 1
end


// ----------------------------------------------------------------------------
program draw
	.`.piegraph'.makepie `0'
end

// ----------------------------------------------------------------------------
// Number of legend keys for the pie graph

program numkeys
	.`.piegraph'.sersets[1].set
	class exit = 0`:serset N'
end


// ----------------------------------------------------------------------------
// Return a key for the specified pie wedge.

program newkey
	gettoken i_pie 0 : 0

	if `.numkeys' == 0 {
		class exit ""
	}

	confirm integer number `i_pie'
	syntax  [ , Position(passthru) ]

	class exit .yxkey_g.new , view(`.objkey') 		///
		style(`.`.piegraph'.piestyles[`i_pie'].objkey') `position'
end


// ----------------------------------------------------------------------------
// Return a key label for a specified pie wedge (keynum).

program label

	syntax [ , Nameonly Keynum(integer 1) ]		// nameonly ignored

	.`.piegraph'.sersets[1].set
	local labdex = serset(3 , `keynum')
	class exit `"`.`.piegraph'.sersets[1].sers[3].value_label `labdex''"'
//	class exit `"`.`.piegraph'.sersets[1].sers[3].value_label `keynum''"'
end


// ----------------------------------------------------------------------------
// Returns the dialog/toolbar name for the key

program dialog
	class exit "2_pieslice"
end
