/*
	power onemean

*!  VERSION 1.2.7  14mar2017

*/

VERSION 14.0

INCLUDE _std_wide
DEFINE _dlght 480
INCLUDE header

HELP hlp1, view("help power onemean")
RESET res1

SCRIPT PREINIT
BEGIN
	create STRING tmpstr
	create STRING graph_res
	create STRING numContents
	create STRING stok
	create ARRAY tmp
	create BOOLEAN containsNumlist
	create BOOLEAN containsNumlist_null
	create BOOLEAN containsNumlist_ma_diff

	program table_create4Onemean
	setscale_hadj resource POWER_ONEMEAN_DLG_HSCALE
END

PROGRAM POSTINIT_PROGRAM
BEGIN
	if __MESSAGE.iseq("ttest") {
		call main.ck_knownsd.setoff
		call main.ck_knownsd.disable
	}
	if __MESSAGE.iseq("ztest") {
		call main.ck_knownsd.seton
		call main.ck_knownsd.disable
	}
END

DIALOG main, tabtitle(resource LBL_TAB_MAIN)				///
	label(resource POWER_ONEMEAN_DLG_TITLE)
BEGIN
  INCLUDE power_compute
  DEFINE errpos _ls
  INCLUDE power_errorprob

  DEFINE sspos +40
  INCLUDE power_onesampsize

  GROUPBOX gb_effect_size	_lft	+40	_iwd	_ht8,		///
	label(resource LBL_EFFECT_SIZE)
  GROUPBOX gb_means		_indent	_ss	_cwd1	_ht5,		///
	label(resource LBL_MEANS)
  DEFINE holdy2 @y
  EDIT ed_null			_indent	_ss	_en14wd	.,		///
	onchange(program check_for_numlist)				///
	tooltip(resource POWER_ONEMEAN_MAIN_ED_NULL)			///
	label("")
  TEXT tx_null			_en14sep @	100	.,		///
	label(resource LBL_STAR_NULL)
  EDIT ed_ma_diff		_iilft	_ls	_en14wd	.,		///
	option(diff)							///
	onchange(program check_for_numlist)				///
	label("")
  TEXT tx_ma_diff		_en14sep @	8	.,		///
	label("*")
  COMBOBOX cb_ma_diff		+10	 @	100	.,		///
	dropdownlist							///
	contents("main_effect_list")					///
	values("main_effect_values")					///
	onselchange("program main_ma_diff_changed")			///
	label(resource LBL_STAR_ALTERNATIVE_DIFFERENCE)
  GROUPBOX gb_std		_lft2	holdy2	_cwd2	_ht5,		///
	label(resource LBL_STANDARD_DEVIATION)
  EDIT ed_sd			_indent	_ss	_en14wd	.,		///
	option(sd)							///
	default(1)							///
	onchange(program check_for_numlist)				///
	tooltip(resource POWER_ONEMEAN_MAIN_ED_SD)			///
	label(resource LBL_STANDARD_DEVIATION)
  TEXT tx_sd			_en14sep @	115	.,		///
	label(resource LBL_STAR_STANDARD_DEVIATION)
  CHECKBOX ck_knownsd		-125	_ls	225	.,		///
	option(knownsd)							///
	onclickon("program power_iteration_tab_check")			///
	onclickoff("program power_iteration_tab_check")			///
	label(resource LBL_ASSUME_A_KNOWN_STANDARD_DEVIATION)

  TEXT tx_fpc			_lft	+50	_iwd	.,		///
	label(resource LBL_STAR_FINITE_POPULATION_CORRECTION)
  COMBOBOX cb_fpc		@	_ss	160	.,		///
	dropdownlist							///
	contents("main_fpc_list")					///
	values("main_fpc_values")					///
	onselchange("program main_fpc_changed")				///
	label(resource LBL_FINITE_POPULATION_CORRECTION)
  EDIT ed_fpc			+170	@	_en14wd	.,		///
	option(fpc)							///
	onchange(program check_for_numlist)				///
	label(resource LBL_FINITE_POPULATION_CORRECTION)

  DEFINE ypos _ls
  INCLUDE power_test_maincommon
END

LIST main_compute_list
BEGIN
	resource LBL_SAMPLE_SIZE
	resource PSS_LBL_POWER
	resource POWER_ONEMEAN_EFFECT_SIZE_TARGET_MEAN
END

LIST main_compute_values
BEGIN
	sampsi
	power
	effect
END

LIST main_effect_list
BEGIN
	resource POWER_LBL_ALTERNATIVE
	resource POWER_LBL_DIFFERENCE
END

LIST main_effect_values
BEGIN
	"ma"
	"diff"
END

PROGRAM main_compute_changed
BEGIN
	if main.cb_compute.iseq("sampsi") {
		call program main_sampsi_on
	}
	if main.cb_compute.iseq("power") {
		call program main_power_on
	}
	if main.cb_compute.iseq("effect") {
		call program main_effect_on
	}
END

PROGRAM main_sampsi_on
BEGIN
	call main.ed_power.show
	call main.ed_beta.show
	call main.tx_power_beta_power.show
	call main.cb_power_beta.show
	call main.ed_n.hide
	call main.tx_n.hide
	call main.ck_nfrac.show
	call main.ed_ma_diff.show
	call main.tx_ma_diff.show
	call main.cb_ma_diff.show
	call script power_test_maincommon_hide_dir
	call program main_power_beta_changed
	call program check_for_numlist
	call program power_iteration_tab_check
END

PROGRAM main_power_on
BEGIN
	call main.ed_power.hide
	call main.ed_beta.hide
	call main.tx_power_beta_power.hide
	call main.cb_power_beta.hide
	call main.ed_n.show
	call main.tx_n.show
	call main.ck_nfrac.hide
	call main.ed_ma_diff.show
	call main.tx_ma_diff.show
	call main.cb_ma_diff.show
	call script power_test_maincommon_hide_dir
	call program check_for_numlist
	call program power_iteration_tab_check
END

PROGRAM main_effect_on
BEGIN
	call main.ed_power.show
	call main.ed_beta.show
	call main.tx_power_beta_power.show
	call main.cb_power_beta.show
	call main.ed_n.show
	call main.tx_n.show
	call main.ck_nfrac.hide
	call main.ed_ma_diff.hide
	call main.tx_ma_diff.hide
	call main.cb_ma_diff.hide
	call script power_test_maincommon_show_dir
	call program main_power_beta_changed
	call program check_for_numlist
	call program power_iteration_tab_check
END

PROGRAM main_ma_diff_changed
BEGIN
	if main.cb_ma_diff.iseq("ma") {
		call main.ed_ma_diff.settooltip resource POWER_ONEMEAN_ALT_MEAN_MA
	}
	else {
		call main.ed_ma_diff.settooltip resource POWER_ONEMEAN_MEAN_DIFF_MA_M0
	}
	call program check_for_numlist
	call program table_create4Onemean
END

PROGRAM main_fpc_changed
BEGIN
	if main.cb_fpc.iseq("none") {
		call main.ed_fpc.hide
	}
	else {
		call main.ed_fpc.show
	}
	call program check_for_numlist
	call program table_create4Onemean
	call program power_iteration_tab_check
END

PROGRAM main_power_beta_table
BEGIN
	call program table_create4Onemean
END

PROGRAM check_for_numlist
BEGIN
	call containsNumlist.setfalse
	call containsNumlist_null.setfalse
	call containsNumlist_ma_diff.setfalse

	if main.ed_null {
		call numContents.setvalue class main.ed_null.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
			call containsNumlist_null.settrue
		}
	}

	if main.ed_ma_diff {
		call numContents.setvalue class main.ed_ma_diff.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
			call containsNumlist_ma_diff.settrue
		}
	}

	if main.ed_alpha {
		call numContents.setvalue class main.ed_alpha.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_power & main.ed_power.isvisible() {
		call numContents.setvalue class main.ed_power.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_beta & main.ed_beta.isvisible() {
		call numContents.setvalue class main.ed_beta.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_n & main.ed_n.isvisible() {
		call numContents.setvalue class main.ed_n.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_sd {
		call numContents.setvalue class main.ed_sd.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if main.ed_fpc & main.ed_fpc.isvisible() {
		call numContents.setvalue class main.ed_fpc.value
		call numContents.expandNumlist
		call stok.setvalue ""
		if numContents {
			call numContents.tokenize tmp
			call stok.setvalue class tmp[2]
		}
		if stok {
			call containsNumlist.settrue
		}
	}

	if containsNumlist {
		call main.ck_parallel.enable
	}
	else {
		call main.ck_parallel.disable
	}
END

PROGRAM power_iteration_tab_check
BEGIN
	call script power_iteration_enable
	if main.cb_compute.iseq("power") {
		call script power_iteration_disable
	}
	else {
		if main.cb_compute.iseq("sampsi") {
			call script power_iteration_is_sampsi
			if main.cb_oneside.iseq("onesided") & main.ck_knownsd & main.cb_fpc.iseq("none") {
				call script power_iteration_disable
			}
		}
		if main.cb_compute.iseq("effect") {
			call script power_iteration_is_effect
			if main.cb_oneside.iseq("onesided") & main.ck_knownsd {
				call script power_iteration_disable
			}
		}
	}
END

INCLUDE _power_list
INCLUDE power_errorprob_pr
INCLUDE power_test_maincommon_pr
INCLUDE power_table_opts
INCLUDE power_graph
INCLUDE power_iteration

PROGRAM command
BEGIN
	put "power onemean "

	if !main.ed_null {
		call create STRING _MSG_TMP
		call _MSG_TMP.format 					///
			"resource LBL_MSGBOX_MEAN_REQUIRED_FMT" 	///
			"resource LBL_TAB_MAIN" 			///
			"resource LBL_NULL"
		stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, "Null" mean must be filled in.
	}

	if !main.ed_null.isnumlist() {
		call create STRING _MSG_TMP
		call _MSG_TMP.format 					///
			"resource LBL_MSGBOX_INVALID_NUMLIST_FOR_MEAN_FMT" ///
			"resource LBL_TAB_MAIN" 			///
			"resource LBL_NULL"
		stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "Null" mean.
	}
	if containsNumlist_null {
		put "("
		put main.ed_null
		put ")"
	}
	else {
		put main.ed_null
	}

	if main.cb_compute.iseq("sampsi") | main.cb_compute.iseq("power") {
		if !main.ed_ma_diff {
			if main.cb_ma_diff.iseq("ma") {
				call create STRING _MSG_TMP
				call _MSG_TMP.format 			///
				  "resource LBL_MSGBOX_MEAN_REQUIRED_FMT" ///
				  "resource LBL_TAB_MAIN"		///
				  "resource POWER_LBL_ALTERNATIVE"
				stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, "Alternative"  mean must be filled in.
			}
			else {
				call create STRING _MSG_TMP
				call _MSG_TMP.format	 					///
					"resource POWER_MSGBOX_BETWEEN_MEANS_REQUIRED_FMT" 	///
					"resource LBL_TAB_MAIN"					///
					"resource POWER_LBL_DIFFERENCE"
				stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, "Difference" between means must be filled in.
			}
		}
	}

	if main.cb_compute.iseq("power") | main.cb_compute.iseq("effect") {
		require main.ed_n
	}

	if main.cb_ma_diff.iseq("ma") & main.cb_ma_diff.isvisible() {
		if !main.ed_ma_diff.isnumlist() {
			call create STRING _MSG_TMP
			call _MSG_TMP.format 				///
				"resource LBL_MSGBOX_INVALID_NUMLIST_FOR_MEAN_FMT" ///
				"resource LBL_TAB_MAIN" 		///
				"resource POWER_LBL_ALTERNATIVE"
			stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "Alternative" mean.
		}
		if containsNumlist_ma_diff {
				put " ("
				put main.ed_ma_diff
				put ")"
			}
			else {
				put " " main.ed_ma_diff
		}
	}

	beginoptions
		if main.cb_ma_diff.iseq("diff") & main.cb_ma_diff.isvisible() {
			if !main.ed_ma_diff.isnumlist() {
				call create STRING _MSG_TMP
				call _MSG_TMP.format 					///
					"resource LBL_MSGBOX_INVALID_NUMLIST_BETWEEN_MEANS_FMT" ///
					"resource LBL_TAB_MAIN"				///
					"resource POWER_LBL_DIFFERENCE"
				stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "Difference" betweens means.
			}
			optionarg main.ed_ma_diff
		}
		if main.ed_n & main.ed_n.isvisible() {
			if !main.ed_n.isnumlist() {
				call create STRING _MSG_TMP
				call _MSG_TMP.format 					///
					"resource LBL_MSGBOX_ON_TAB_INVALID_NUMLIST_FOR_FMT" ///
					"resource LBL_TAB_MAIN"				///
					"resource LBL_SAMPLE_SIZE"
				stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "Sample size".
			}
			if !main.ed_n.isNumlistGT(0) {
				call create STRING _MSG_TMP
				call _MSG_TMP.format 					///
					"resource LBL_MSGBOX_ON_TAB_GREATER_THAN_0_FMT" ///
					"resource LBL_TAB_MAIN"				///
					"resource LBL_SAMPLE_SIZE"
				stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, "Sample size" must be greater than 0.
			}
			optionarg main.ed_n
		}
		option main.ck_nfrac

		put " " /program power_errorprob_output

		if main.ed_sd {
			if !main.ed_sd.isnumlist() {
				call create STRING _MSG_TMP
				call _MSG_TMP.format 					///
					"resource LBL_MSGBOX_ON_TAB_INVALID_NUMLIST_FOR_FMT" ///
					"resource LBL_TAB_MAIN"				///
					"resource LBL_STANDARD_DEVIATION"
				stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "Standard deviation".
			}
			if !main.ed_sd.isNumlistGT(0) {
				call create STRING _MSG_TMP
				call _MSG_TMP.format 					///
					"resource LBL_MSGBOX_ON_TAB_GREATER_THAN_0_FMT" ///
					"resource LBL_TAB_MAIN"				///
					"resource LBL_STANDARD_DEVIATION"
				stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, "Standard deviation" must be greater than 0.
			}
			optionarg /hidedefault main.ed_sd
		}
		
		if main.ck_knownsd {
			put " knownsd"
		}

		if main.cb_fpc.iseq("pop_size") |			///
			main.cb_fpc.iseq("sample_rate") {
			require main.ed_fpc
			if main.cb_fpc.iseq("pop_size") {
				if !main.ed_fpc.isnumlist() {
					call create STRING _MSG_TMP
					call _MSG_TMP.format 					///
						"resource LBL_MSGBOX_ON_TAB_INVALID_NUMLIST_FOR_FMT" ///
						"resource LBL_TAB_MAIN"				///
						"resource LBL_POPULATION_SIZE"
					stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "Population size".
				}
				if !main.ed_fpc.isNumlistGT(0) {
					call create STRING _MSG_TMP
					call _MSG_TMP.format 					///
						"resource LBL_MSGBOX_ON_TAB_GREATER_THAN_0_FMT" ///
						"resource LBL_TAB_MAIN"				///
						"resource LBL_POPULATION_SIZE"
					stopbox stop "class _MSG_TMP.value"
				}
// On the "Main" tab, "Population size" must be greater than 0.
			}
			if main.cb_fpc.iseq("sample_rate") {
				if !main.ed_fpc.isnumlist() {
					call create STRING _MSG_TMP
					call _MSG_TMP.format 					///
						"resource LBL_MSGBOX_ON_TAB_INVALID_NUMLIST_FOR_FMT" ///
						"resource LBL_TAB_MAIN"				///
						"resource LBL_SAMPLING_RATE"
					stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, an invalid numlist is specified for "Sampling rate".
				}
				if !(main.ed_fpc.isNumlistGE(0) & main.ed_fpc.isNumlistLE(1)) {
					call create STRING _MSG_TMP
					call _MSG_TMP.format 				///
						"resource LBL_MSGBOX_ON_TAB_GE_0_LE_1_FMT" ///
						"resource LBL_TAB_MAIN"			///
						"resource LBL_SAMPLING_RATE"
					stopbox stop "class _MSG_TMP.value"
// On the "Main" tab, "Sampling rate" must be in [0,1].
				}
			}
			optionarg main.ed_fpc
		}

		put " " /program power_test_maincommon_output
		put " " /program power_table_opts_output
		put " " /program power_graph_output
		put " " /program power_iteration_output
	endoptions
END

