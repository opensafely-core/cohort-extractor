{smcl}
{* *! version 1.1.17  07mar2018}{...}
{viewerdialog predictnl "dialog predictnl"}{...}
{vieweralsosee "[R] predictnl" "mansection R predictnl"}{...}
{vieweralsosee "" "--"}{...}
{vieweralsosee "[R] lincom" "help lincom"}{...}
{vieweralsosee "[R] nlcom" "help nlcom"}{...}
{vieweralsosee "[R] predict" "help predict"}{...}
{vieweralsosee "[R] test" "help test"}{...}
{vieweralsosee "[R] testnl" "help testnl"}{...}
{viewerjumpto "Syntax" "predictnl##syntax"}{...}
{viewerjumpto "Menu" "predictnl##menu"}{...}
{viewerjumpto "Description" "predictnl##description"}{...}
{viewerjumpto "Links to PDF documentation" "predictnl##linkspdf"}{...}
{viewerjumpto "Options" "predictnl##options"}{...}
{viewerjumpto "Remarks" "predictnl##remarks"}{...}
{viewerjumpto "Examples" "predictnl##examples"}{...}
{p2colset 1 18 20 2}{...}
{p2col:{bf:[R] predictnl} {hline 2}}Obtain nonlinear predictions, standard
errors, etc., after estimation{p_end}
{p2col:}({mansection R predictnl:View complete PDF manual entry}){p_end}
{p2colreset}{...}


{marker syntax}{...}
{title:Syntax}

{p 8 18 2}
{cmd:predictnl} {dtype} {newvar} = {it:pnl_exp} {ifin} [{cmd:,} {it:options}]

{synoptset 20 tabbed}{...}
{synopthdr}
{synoptline}
{syntab :Main}
{synopt :{opth se(newvar)}}create {it:newvar} containing standard errors{p_end}
{synopt :{opth var:iance(newvar)}}create {it:newvar} containing
variances{p_end}
{synopt :{opth w:ald(newvar)}}create {it:newvar} containing the Wald test
statistic{p_end}
{synopt :{opth p(newvar)}}create {it:newvar} containing the p-value for the Wald test{p_end}
{synopt :{opth ci:(newvarlist:newvars)}}create {it:newvars} containing lower and upper
confidence intervals{p_end}
{synopt :{opt l:evel(#)}}set confidence level; default is
{cmd:level(95)}{p_end}
{synopt :{opt g(stub)}}create {it:stub}{cmd:1}, {it:stub}{cmd:2}, ..., {it:stub}{cmd:k} variables containing observation-specific derivatives{p_end}

{syntab :Advanced}
{synopt :{opt iter:ate(#)}}maximum iterations for finding optimal step size;
default is 100{p_end}
{synopt :{opt force}}calculate standard errors, etc., even when possibly
inappropriate{p_end}

{synopt :{opt df(#)}}use F distribution with {it:#} denominator degrees of
        freedom for the reference distribution of the test statistic{p_end}
{synoptline}
{p2colreset}{...}
{p 4 6 2}
{opt df(#)} does not appear in the dialog box.
{p_end}


{marker menu}{...}
{title:Menu}

{phang}
{bf:Statistics > Postestimation}


{marker description}{...}
{title:Description}

{pstd}
{cmd:predictnl} calculates (possibly) nonlinear predictions after any Stata
estimation command and optionally calculates the variances, standard errors,
Wald test statistics, p-values, and confidence limits
for these predictions.  Unlike its companion nonlinear postestimation
commands {cmd:testnl} and {cmd:nlcom}, {cmd:predictnl} generates functions
of the data (that is, predictions), not scalars.  The quantities generated by
{cmd:predictnl} are thus vectorized over the observations in the data. 

{pstd}
Consider some general prediction, g(theta, x_i), for i = 1, ..., n, where
theta are the model parameters and x_i are some data for the ith observation;
x_i is assumed fixed.  Typically, g(theta, x_i) is estimated by g(theta-hat),
x_i), where theta-hat are the estimated model parameters, which are stored in
{cmd:e(b)} following any Stata estimation command.

{pstd}
In its most common use, {cmd:predictnl} generates two variables:  one
containing the estimated prediction, g(theta-hat, x_i), the
other containing the estimated standard error of g(theta-hat, x_i).  The
calculation of standard errors (and other obtainable quantities that are based
on the standard errors, such as test statistics) is based on the delta method,
an approximation appropriate in large samples; see
{mansection R predictnlMethodsandformulas:{it:Methods and formulas}}
in {bf:[R] predictnl}.

{pstd}
{cmd:predictnl} can be used with {cmd:svy} estimation results (assuming that
{cmd:predict} is also allowed), see
{manhelp svy_postestimation SVY:svy postestimation}.

{pstd}
The specification of g(theta-hat, x_i) is handled by specifying {it:pnl_exp},
and the values of g(theta-hat, x_i) are stored in the new variable {newvar} of
storage type {it:type}. {it:pnl_exp} is any valid Stata expression and may
also contain calls to two special functions unique to {cmd:predictnl}:

{p 8 11 6}
1. {cmd:predict(}[{it:predict_options}]{cmd:)}:
When you are evaluating {it:pnl_exp}, {cmd:predict()} is a convenience
function that replicates the calculation performed by the command

	       {cmd:predict ...,} {it:predict_options}

{p 11 11 6}
As such, {cmd:predict()} function may be used either as a shorthand for the
formula used to make this prediction or when the formula is not readily
available.  When used without arguments, {cmd:predict()} replicates the
default prediction for that particular estimation command.

{p 8 11 6}
2. {cmd:xb(}[{it:eqno}]{cmd:)}:  The {cmd:xb()} function replicates the
calculation of the linear predictor x_j*b for equation {it:eqno}.
If {cmd:xb()} is specified without {it:eqno}, the linear predictor for
the first equation (or the only equation in single-equation estimation) is
obtained.

{p 11 11 6}
For example, {cmd:xb(#1)} (or equivalently, {cmd:xb()}) with no arguments)
translates to the linear predictor for the first equation, {cmd:xb(#2)} for the
second, and so on.  You could also refer to the equations by their
names, such as {cmd:xb(income)}.

{p 11 11 6}
When specifying {it:pnl_exp}, both of these functions may be used repeatedly,
in combination, and in combination with other Stata functions and expressions.
See {mansection R predictnlRemarksandexamples:{it:Remarks and examples}} in
{bf:[R] predictnl} for examples that use both of these functions.


{marker linkspdf}{...}
{title:Links to PDF documentation}

        {mansection R predictnlQuickstart:Quick start}

        {mansection R predictnlRemarksandexamples:Remarks and examples}

        {mansection R predictnlMethodsandformulas:Methods and formulas}

{pstd}
The above sections are not included in this help file.


{marker options}{...}
{title:Options}

{dlgtab:Main}

{phang}
{opth se(newvar)} adds {it:newvar} of storage type {it:type}, where for each
{opt i} in the prediction sample, {it:newvar}{cmd:[i]} contains the estimated
standard error of {it:pnl_exp}{cmd:[i]}.

{phang}
{opth variance(newvar)} adds {it:newvar} of storage type {it:type}, where
for each {opt i} in the prediction sample, {it:newvar}{cmd:[i]} contains the
estimated variance of {it:pnl_exp}{cmd:[i]}.

{phang}
{opth wald(newvar)} adds {it:newvar} of storage type {it:type}, where
for each {opt i} in the prediction sample, {it:newvar}{cmd:[i]} contains the
Wald test statistic for the test of the hypothesis H0:{it:pnl_exp}{cmd:[i]}=0.

{phang}
{opth p(newvar)} adds {it:newvar} of storage type {it:type}, where
{it:newvar}{cmd:[i]} contains the p-value for the Wald
test H0:{it:pnl_exp}{cmd:[i]}=0 versus the two-sided alternative.

{phang}
{opth ci:(newvarlist:newvars)}
requires the specification of two {it:newvars}, such that
the {it:i}th observation of each will contain the left and right endpoints
(respectively) of a confidence interval for {it:pnl_exp}{cmd:[i]}.  The level
of the confidence intervals is determined by {opt level(#)}.

{phang}
{opt level(#)} specifies the confidence level, as a percentage, for
confidence intervals.  The default is {cmd:level(95)} or as set by 
{helpb set level}.

{phang}
{opt g(stub)} specifies that new variables, {it:stub}{cmd:1},
{it:stub}{cmd:2}, ..., {it:stub}{cmd:k} be created, where {opt k} is the
dimension of e(b).  {it:stub}{cmd:1} will contain the observation-specific
derivatives of {it:pnl_exp} with respect to the first element listed in
e(b); {it:stub}{cmd:2} will contain the derivatives of {it:pnl_exp}
with respect to e(b); etc.  If the derivative of {it:pnl_exp} with
respect to a particular coefficient in e(b) equals zero for all observations
in the prediction sample, the {it:stub} variable for that coefficient is not
created.  The ordering of the parameters in e(b) is precisely that
of the stored vector of parameter estimates e(b).

{dlgtab:Advanced}

{phang}
{opt iterate(#)} specifies the maximum number of iterations used to find the
optimal step size in the calculation of numerical derivatives of
{it:pnl_exp} with respect to estimated model coefficients.  By default, the
maximum number of iterations is 100, but convergence is usually achieved 
after only a few iterations.  You should rarely have to use this option.

{phang}
{opt force} forces the calculation of standard errors and other
inference-related quantities in situations where {opt predictnl} would
otherwise refuse to do so.  The calculation of standard errors takes place by
evaluating the numerical derivative of {it:pnl_exp} with respect
to the coefficient vector e(b).  If {opt predictnl} detects that {it:pnl_exp}
is possibly a function of random quantities other than e(b), it will refuse
to calculate standard errors or any other quantity derived from them.  The
{opt force} option forces the calculation to take place anyway.  If you use
the {opt force} option, there is no guarantee that any inference quantities
(for example, standard errors) will be correct or that the values obtained
can be interpreted.

{pstd}
The following option is available with {opt predictnl} but is not shown in the
dialog box:

{phang}
{opt df(#)} specifies that the F distribution with {it:#} denominator
degrees of freedom be used for the reference distribution of the test
statistic.


{marker remarks}{...}
{title:Remark on the manipulability of nonlinear Wald tests}

{pstd}
In contrast to likelihood-ratio tests, different -- mathematically
equivalent -- formulations of an hypothesis may lead to different results
for a nonlinear Wald test (lack of invariance). For instance, the two
hypotheses

	H0: {it:pnl_exp}{cmd:[i]} = 0

	H0: exp({it:pnl_exp}{cmd:[i]}) - 1 = 0

{pstd}
are mathematically equivalent expressions but do not yield the same test
statistic and p-value. In extreme cases, under one formulation, one would
reject H0, whereas under an equivalent formulation one would not reject H0.


{title:Remark on the use of the functions {cmd:predict()} and {cmd:xb()}}

{pstd}
When calculating inference-related quantities such as standard
errors, {it:pnl_exp} is evaluated repeatedly for different values of the model
parameters.  Therefore, think of {cmd:predict()} and {cmd:xb()} as a means of
substituting for the {it:formula} of the calculation and not a means of
substituting the value of the calculation that is obtained when the model
parameters are set to any specific values.  For example,

        {cmd:. predict double }{it:pred_var, predict_options}
	{cmd:. predictnl }{it:newvar}{cmd: = }{it:pred_var}{cmd:, se(}{it:newvar_se}{cmd:)}

{pstd}
will give standard errors ({it:newvar_se}) equal to zero, since once
evaluated, {it:pred_var} will contain values that are fixed with respect to
e(b).  Instead,

{phang2}{cmd:. predictnl }{it:newvar}{cmd: = predict(}{it:predict_options}{cmd:), se(}{it:newvar_se}{cmd:)}

{pstd}
will produce what is intended.


{marker examples}{...}
{title:Examples}

    {hline}
    Setup
{phang2}{cmd:. webuse lbw}{p_end}

{pstd}Fit maximum-likelihood probit model{p_end}
{phang2}{cmd:. probit low lwt smoke ptl ht}

{pstd}Compute predictions and their standard errors{p_end}
{phang2}{cmd:. predictnl phat = normal(_b[_cons] + _b[ht]*ht + _b[ptl]*ptl +}
               {cmd:_b[smoke]*smoke + _b[lwt]*lwt), se(phat_se)}

    {hline}
    Setup
{phang2}{cmd:. webuse sysdsn1, clear}

{pstd}Fit maximum-likelihood multinomial logit model{p_end}
{phang2}{cmd:. mlogit insure age male nonwhite i.site}{p_end}

{pstd}Compute observation-specific relative risks of selecting a prepaid plan
over an indemnity plan (with standard errors){p_end}
{phang2}{cmd:. predictnl RRpaid = exp(xb(Prepaid)), se(SERRppaid)}

{pstd}Same command as above{p_end}
{phang2}{cmd:. predictnl RRpaid = exp(xb(#1)), se(SERRppaid2)}

{pstd}Calculate relative risk directly as ratio of two predicted
probabilities{p_end}
{phang2}{cmd:. predictnl RRppaid =}
    {cmd:predict(outcome(Prepaid))/predict(outcome(Indemnity)), se(SERRppaid3)}

{pstd}For each observation, test whether the relative risk of choosing a
prepaid plan over an indemnity plan is different from one{p_end}
{phang2}{cmd:. predictnl RRm1 = exp(xb(Prepaid)) - 1, wald(W_RRm1)}
     {cmd:p(sig_RRm1)}

    {hline}
    Setup
{phang2}{cmd:. webuse drugtr, clear}

{pstd}Fit parametric survival model{p_end}
{phang2}{cmd:. streg drug age, dist(weibull)}{p_end}

{pstd}Calculate predicted mean survival times and their standard errors{p_end}
{phang2}{cmd:. predictnl t_hat = predict(mean time), se(t_hat_se)}{p_end}
    {hline}
