//                              pos_textbox
//
//  Textbox that tracks its own position (in whatever scales are set when it
//  is drawn).
//
//  Ignores boxmargin.

*! version 1.3.0  17mar2019

class {
	.xpos	= .gsize.new , style(0)
	.ypos	= .gsize.new , style(0)
} , inherit(sized_textbox)


// ---------------------------------------------------------------------------

program new
	.grid_dragable	= 0
	.deleted	= 0

	.Super.new `0'
end

program set

	syntax [ , XPOS(string) YPOS(string) datesok(string) * ]

	.Super.set , `options'

	if `"`datesok'"' != "" {
		_date2elapsed, format(`datesok') datelist(`xpos')
		if ("`s(fmt)'" != "") local xpos `s(args)'
	}

	foreach d in x y {
		if `"``d'pos'"' != `""' {
			capture numlist "``d'pos'" , min(1) max(1)
			if _rc {
				di as error `"``d'pos' is not a number"'
				exit 198
			}
			.`d'pos.setstyle , style(``d'pos')

		}
	}
end


program setpos

	syntax [ , XPOS(string) YPOS(string) ]

	foreach d in x y {
		if `"``d'pos'"' != `""' {
			capture numlist "``d'pos'" , min(1) max(1)
			if _rc {
				di as error `"``d'pos' is not a number"'
				exit 198
			}
			.`d'pos.setstyle , style(``d'pos')

		}
	}
end


// ---------------------------------------------------------------------------

program xsize

	if `.as_textbox.istrue' {
		class exit .Super.xsize
	}

	if 0`.text.arrnels' == 0 {
		class exit 0
	}

	if index("`.orientation.setting'", "horizontal") {
		if `._has_specified_textwidth' {
			local sz = `._specified_textwidth'
		}
		else {
			local sz = `.textwidth'
		}
	}
	else {
		if `._has_specified_textheight' {
			local sz = `._specified_textheight'
		}
		else {
			local sz = `.textheight'
		}
	}

	class exit `sz'
end


program ysize

	if `.as_textbox.istrue' {
		class exit .Super.ysize
	}

	if 0`.text.arrnels' == 0 {
		class exit 0
	}

	if index("`.orientation.setting'", "vertical") {
		if `._has_specified_textwidth' {
			local sz = `._specified_textwidth'
		}
		else {
			local sz = `.textwidth'
		}
	}
	else {
		if `._has_specified_textheight' {
			local sz = `._specified_textheight'
		}
		else {
			local sz = `.textheight'
		}
	}

	class exit = `sz'
end

// ---------------------------------------------------------------------------

program draw

	if ! `.draw_view.istrue' { 
		exit						/* Exit */
	}
	if 0`.text.arrnels' == 0 {
		exit						/* Exit */
	}

	.style.setgdifull , angle(`.orientation.val')	// style and orient

	local xsz = `.extent x'				// full size w/ margin
	local ysz = `.extent y'

	gdi moveto     `.xpos.val' `.ypos.val'		// x-y position
	gdi gm_rmoveto `.xoffset'  `.yoffset'

	local x = `.xpos.val' + `.xoffset'		
	local y = `.ypos.val' + `.yoffset'

	if `.style.box_alignment.iswest' {		// box alignment
		gdi gm_rmoveto -`xsz' 0
		local x = `x' - `xsz'
	}
	else {
		if ! `.style.box_alignment.iseast' {
			gdi gm_rmoveto `=-`xsz'/2' 0
			local x = `x' - `xsz'/2
		}
	}
	if `.style.box_alignment.issouth' {
		gdi gm_rmoveto 0 -`ysz'
		local y = `y' - `ysz'
	}
	else {
		if ! `.style.box_alignment.isnorth' {
			gdi gm_rmoveto 0 `=-`ysz'/2'
			local y = `y' - `ysz'/2
		}
	}

	.set_gdi_posn_notrans `gdi(ycur)' `gdi(xcur)'			///
		`=`gdi(ycur)'+`gdi(gbeta)'*`ysz''			///
		`=`gdi(xcur)'+`gdi(gbeta)'*`xsz''

							// draw bounding box
	if `.style.drawbox.istrue' {
		._draw_box `xsz' `ysz'
	}

							// handle margin
	gdi gm_rmoveto 0`.style.margin.gmleft' 0`.style.margin.gmbottom'

	.xsize_ren = .xsize
	.ysize_ren = .ysize

							// shift for orientation
	._get_x_y_delta xshift yshift xdelta ydelta : 0 0 
	gdi gm_rmoveto `xshift' `yshift'

	if (0`.text.arrnels' == 0)  exit				// Exit

	local y0  1e99
	local x0  1e99
	local y1 -1e99
	local x1 -1e99
	forvalues i = 1/0`.text.arrnels' {
		gdi extctext `.text[`i']'
		gdi gm_rmoveto `xdelta' `ydelta'
		if ! `.style.drawbox.istrue' {
			local y0 = min(`y0', `gdi(y0text)')
			local x0 = min(`x0', `gdi(x0text)')
			local y1 = max(`y1', `gdi(y1text)')
			local x1 = max(`x1', `gdi(x1text)')
		}
	}

	if (! `.style.drawbox.istrue') .set_gdi_posn_notrans `y0' `x0' `y1' `x1'
end

// ----------------------------------------------------------------------------
// Determine if a position is in the textbox

program at_pos
	class exit = 0`.AtClickedPos'
end


// ----------------------------------------------------------------------------
// Respond to a .DragTo by moving the position

program DragTo
	args y x

	.setpos , ypos(`=`y'-`._Gr_Global.y_offset'')			///
		  xpos(`=`x'-`._Gr_Global.x_offset'')
end


// ----------------------------------------------------------------------------
// Respond to a .DragBy by moving the position

program DragBy
	args y_shift x_shift

	.ypos.setstyle , style(`=`.ypos.val'+`y_shift'')
	.xpos.setstyle , style(`=`.xpos.val'+`x_shift'')
end



// ---------------------------------------------------------------------------

program _draw_box
	args xsz ysz
	if 0`.style.linestyle.patterned_line' {
		tempname linesty
		.`linesty' = .linestyle.new, style(background)
		.`linesty'.setgdifull
		_draw_rect `xsz' `ysz'
		.style.linestyle.setgdifull
		_draw_rect  `xsz' `ysz'
	}
	else {
		_draw_rect `xsz' `ysz'
	}
end

program _draw_rect
	args xsz ysz

	gdi polybegin
	gdi gm_rmoveto    0      0
	gdi gm_rlineto  `xsz'    0
	gdi gm_rlineto    0    `ysz'
	gdi gm_rlineto -`xsz'   0
	gdi gm_rlineto    0   -`ysz'
	gdi polyend
end
