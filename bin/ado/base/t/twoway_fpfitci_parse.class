//                                 twoway_fpfitci_parse
//
//   A parser for adding a fractional polynomial fit line with confidence 
//   intervals.  
//   Works with twoway.ado.
//
//   twoway_lfitci_parse does most of the work.

*! version 1.0.1  19feb2003

version 8

class {
	est_cmd		= "regress"
} , inherit(twoway_lfitci_parse twoway_lfit_parse twoway_y2xview_parse)


// ---------------------------------------------------------------------------

program parse
	.std = "stdp"

	.Super(twoway_lfitci_parse).parse `0'

	if `"`.trans'"' != `""' {
		di as error "option transform() not allowed"
		exit 198
	}
	if `.min' < . | `.max' < . {
		di as error "option range() not allowed"
		exit 198
	}
	if "`.std'" != "stdp" {
		di as error "`.std' not allowed"
		exit 198
	}

	local 0 , `.options'
	_parse combop 0 : 0 , option(ESTCmd)     rightmost
	syntax [ , ESTCmd(string) * ]

	.options = `"`options'"'

	if `"`estcmd'"' == `""' {
		.est_cmd = "regress"
	}
	else {
		.est_cmd = `"`estcmd'"'
	}

end


/* -------------------------------------------------------------------------*/
/*
	Creates a new serset and the view and returns its reference.
	Assumes that the data in memory is the same as when parse was called.

	Allows a touse(varname) option that further restricts the sample, 
	restricts beyond the held .if and .in

	Additional options to the .serset.new command may be specified, but
	this is unlikely to be necessary.

	If must_create_serset == 1, then this command MUST be used, 
	otherwise the serset may be created by other means.
*/ 

program log_create_serset

	syntax , LOG(name) SERSETNAME(string) [ TOUSE(passthru) * ]

	.log_touse , log(`log') `touse'

	local rest `.varlist'
	gettoken y rest : rest
	gettoken x rest : rest

	.`log'.Arrpush __NOLOG__ twoway__fpfit_serset , 		  ///
		sersetname(`sersetname') touse(\`touse1') x(`x') y(`y')	  ///
		predopts(`.predict_opts') regopts(`.regress_opts') 	  ///
		cmd(`.est_cmd') morevars(`rest')			  ///
		weight(`.wtype'`.wtexp') std(`.std') level(`.level')

	.`log'.Arrpush LogMapping .`sersetname'	// make _fr_runlog place 
						// mapping statement into 
						// permanent log.

	.wtype = ""			// so .Super.log_create_view will
	.wtexp = ""			// not try to add weight to serset

	if `.fit' {
		.n = 2			// so log_create_view gets called twice
	}
	else	.n = 1			// only call for ci
end


